// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: block_subscribe/v1/block_subscribe.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Block_GetSupportedMetadata_FullMethodName    = "/api.block_subscribe.v1.Block/GetSupportedMetadata"
	Block_IsSupportedChainNetwork_FullMethodName = "/api.block_subscribe.v1.Block/IsSupportedChainNetwork"
	Block_SubscribeTransaction_FullMethodName    = "/api.block_subscribe.v1.Block/SubscribeTransaction"
)

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockClient interface {
	GetSupportedMetadata(ctx context.Context, in *GetSupportedMetadataRequest, opts ...grpc.CallOption) (*GetSupportedMetadataReply, error)
	IsSupportedChainNetwork(ctx context.Context, in *IsSupportedChainNetworkRequest, opts ...grpc.CallOption) (*IsSupportedChainNetworkReply, error)
	SubscribeTransaction(ctx context.Context, in *SubscribeTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeTransactionReply], error)
}

type blockClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockClient(cc grpc.ClientConnInterface) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) GetSupportedMetadata(ctx context.Context, in *GetSupportedMetadataRequest, opts ...grpc.CallOption) (*GetSupportedMetadataReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupportedMetadataReply)
	err := c.cc.Invoke(ctx, Block_GetSupportedMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) IsSupportedChainNetwork(ctx context.Context, in *IsSupportedChainNetworkRequest, opts ...grpc.CallOption) (*IsSupportedChainNetworkReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsSupportedChainNetworkReply)
	err := c.cc.Invoke(ctx, Block_IsSupportedChainNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) SubscribeTransaction(ctx context.Context, in *SubscribeTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeTransactionReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Block_ServiceDesc.Streams[0], Block_SubscribeTransaction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTransactionRequest, SubscribeTransactionReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Block_SubscribeTransactionClient = grpc.ServerStreamingClient[SubscribeTransactionReply]

// BlockServer is the server API for Block service.
// All implementations must embed UnimplementedBlockServer
// for forward compatibility.
type BlockServer interface {
	GetSupportedMetadata(context.Context, *GetSupportedMetadataRequest) (*GetSupportedMetadataReply, error)
	IsSupportedChainNetwork(context.Context, *IsSupportedChainNetworkRequest) (*IsSupportedChainNetworkReply, error)
	SubscribeTransaction(*SubscribeTransactionRequest, grpc.ServerStreamingServer[SubscribeTransactionReply]) error
	mustEmbedUnimplementedBlockServer()
}

// UnimplementedBlockServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockServer struct{}

func (UnimplementedBlockServer) GetSupportedMetadata(context.Context, *GetSupportedMetadataRequest) (*GetSupportedMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedMetadata not implemented")
}
func (UnimplementedBlockServer) IsSupportedChainNetwork(context.Context, *IsSupportedChainNetworkRequest) (*IsSupportedChainNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSupportedChainNetwork not implemented")
}
func (UnimplementedBlockServer) SubscribeTransaction(*SubscribeTransactionRequest, grpc.ServerStreamingServer[SubscribeTransactionReply]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransaction not implemented")
}
func (UnimplementedBlockServer) mustEmbedUnimplementedBlockServer() {}
func (UnimplementedBlockServer) testEmbeddedByValue()               {}

// UnsafeBlockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockServer will
// result in compilation errors.
type UnsafeBlockServer interface {
	mustEmbedUnimplementedBlockServer()
}

func RegisterBlockServer(s grpc.ServiceRegistrar, srv BlockServer) {
	// If the following call pancis, it indicates UnimplementedBlockServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Block_ServiceDesc, srv)
}

func _Block_GetSupportedMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetSupportedMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_GetSupportedMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetSupportedMetadata(ctx, req.(*GetSupportedMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_IsSupportedChainNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSupportedChainNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).IsSupportedChainNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Block_IsSupportedChainNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).IsSupportedChainNetwork(ctx, req.(*IsSupportedChainNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_SubscribeTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockServer).SubscribeTransaction(m, &grpc.GenericServerStream[SubscribeTransactionRequest, SubscribeTransactionReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Block_SubscribeTransactionServer = grpc.ServerStreamingServer[SubscribeTransactionReply]

// Block_ServiceDesc is the grpc.ServiceDesc for Block service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Block_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.block_subscribe.v1.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedMetadata",
			Handler:    _Block_GetSupportedMetadata_Handler,
		},
		{
			MethodName: "IsSupportedChainNetwork",
			Handler:    _Block_IsSupportedChainNetwork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTransaction",
			Handler:       _Block_SubscribeTransaction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "block_subscribe/v1/block_subscribe.proto",
}
