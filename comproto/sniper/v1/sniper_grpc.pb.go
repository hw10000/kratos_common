// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sniper/v1/sniper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sniper_CreateSniperOrder_FullMethodName  = "/api.sniper.v1.Sniper/CreateSniperOrder"
	Sniper_CancelSniperOrder_FullMethodName  = "/api.sniper.v1.Sniper/CancelSniperOrder"
	Sniper_GetSniperOrder_FullMethodName     = "/api.sniper.v1.Sniper/GetSniperOrder"
	Sniper_GetAllSniperOrders_FullMethodName = "/api.sniper.v1.Sniper/GetAllSniperOrders"
)

// SniperClient is the client API for Sniper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SniperClient interface {
	CreateSniperOrder(ctx context.Context, in *CreateSniperOrderRequest, opts ...grpc.CallOption) (*CreateSniperOrderReply, error)
	CancelSniperOrder(ctx context.Context, in *CancelSniperOrderRequest, opts ...grpc.CallOption) (*CancelSniperOrderReply, error)
	GetSniperOrder(ctx context.Context, in *GetSniperOrderRequest, opts ...grpc.CallOption) (*GetSniperOrderReply, error)
	GetAllSniperOrders(ctx context.Context, in *GetAllSniperOrdersRequest, opts ...grpc.CallOption) (*GetAllSniperOrdersReply, error)
}

type sniperClient struct {
	cc grpc.ClientConnInterface
}

func NewSniperClient(cc grpc.ClientConnInterface) SniperClient {
	return &sniperClient{cc}
}

func (c *sniperClient) CreateSniperOrder(ctx context.Context, in *CreateSniperOrderRequest, opts ...grpc.CallOption) (*CreateSniperOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSniperOrderReply)
	err := c.cc.Invoke(ctx, Sniper_CreateSniperOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sniperClient) CancelSniperOrder(ctx context.Context, in *CancelSniperOrderRequest, opts ...grpc.CallOption) (*CancelSniperOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSniperOrderReply)
	err := c.cc.Invoke(ctx, Sniper_CancelSniperOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sniperClient) GetSniperOrder(ctx context.Context, in *GetSniperOrderRequest, opts ...grpc.CallOption) (*GetSniperOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSniperOrderReply)
	err := c.cc.Invoke(ctx, Sniper_GetSniperOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sniperClient) GetAllSniperOrders(ctx context.Context, in *GetAllSniperOrdersRequest, opts ...grpc.CallOption) (*GetAllSniperOrdersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSniperOrdersReply)
	err := c.cc.Invoke(ctx, Sniper_GetAllSniperOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SniperServer is the server API for Sniper service.
// All implementations must embed UnimplementedSniperServer
// for forward compatibility.
type SniperServer interface {
	CreateSniperOrder(context.Context, *CreateSniperOrderRequest) (*CreateSniperOrderReply, error)
	CancelSniperOrder(context.Context, *CancelSniperOrderRequest) (*CancelSniperOrderReply, error)
	GetSniperOrder(context.Context, *GetSniperOrderRequest) (*GetSniperOrderReply, error)
	GetAllSniperOrders(context.Context, *GetAllSniperOrdersRequest) (*GetAllSniperOrdersReply, error)
	mustEmbedUnimplementedSniperServer()
}

// UnimplementedSniperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSniperServer struct{}

func (UnimplementedSniperServer) CreateSniperOrder(context.Context, *CreateSniperOrderRequest) (*CreateSniperOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSniperOrder not implemented")
}
func (UnimplementedSniperServer) CancelSniperOrder(context.Context, *CancelSniperOrderRequest) (*CancelSniperOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSniperOrder not implemented")
}
func (UnimplementedSniperServer) GetSniperOrder(context.Context, *GetSniperOrderRequest) (*GetSniperOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSniperOrder not implemented")
}
func (UnimplementedSniperServer) GetAllSniperOrders(context.Context, *GetAllSniperOrdersRequest) (*GetAllSniperOrdersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSniperOrders not implemented")
}
func (UnimplementedSniperServer) mustEmbedUnimplementedSniperServer() {}
func (UnimplementedSniperServer) testEmbeddedByValue()                {}

// UnsafeSniperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SniperServer will
// result in compilation errors.
type UnsafeSniperServer interface {
	mustEmbedUnimplementedSniperServer()
}

func RegisterSniperServer(s grpc.ServiceRegistrar, srv SniperServer) {
	// If the following call pancis, it indicates UnimplementedSniperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sniper_ServiceDesc, srv)
}

func _Sniper_CreateSniperOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSniperOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SniperServer).CreateSniperOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sniper_CreateSniperOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SniperServer).CreateSniperOrder(ctx, req.(*CreateSniperOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sniper_CancelSniperOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSniperOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SniperServer).CancelSniperOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sniper_CancelSniperOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SniperServer).CancelSniperOrder(ctx, req.(*CancelSniperOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sniper_GetSniperOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSniperOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SniperServer).GetSniperOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sniper_GetSniperOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SniperServer).GetSniperOrder(ctx, req.(*GetSniperOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sniper_GetAllSniperOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSniperOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SniperServer).GetAllSniperOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sniper_GetAllSniperOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SniperServer).GetAllSniperOrders(ctx, req.(*GetAllSniperOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sniper_ServiceDesc is the grpc.ServiceDesc for Sniper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sniper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sniper.v1.Sniper",
	HandlerType: (*SniperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSniperOrder",
			Handler:    _Sniper_CreateSniperOrder_Handler,
		},
		{
			MethodName: "CancelSniperOrder",
			Handler:    _Sniper_CancelSniperOrder_Handler,
		},
		{
			MethodName: "GetSniperOrder",
			Handler:    _Sniper_GetSniperOrder_Handler,
		},
		{
			MethodName: "GetAllSniperOrders",
			Handler:    _Sniper_GetAllSniperOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sniper/v1/sniper.proto",
}
