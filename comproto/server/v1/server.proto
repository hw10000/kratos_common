syntax = "proto3";

package api.server.v1;

option go_package = "asset_management_server/api/server/v1;v1";
option java_multiple_files = true;
option java_package = "api.server.v1";

service Address {
	rpc CreateAddress(CreateAddressRequest) returns (CreateAddressReply);
	rpc CreateAddressBatch(CreateAddressBatchRequest) returns (CreateAddressBatchReply);
	rpc StoreSecret (StoreSecretRequest) returns (StoreSecretReply);
	rpc DecodeSecret (DecodeSecretRequest) returns (DecodeSecretReply);
    rpc StoreSecretBatch (StoreSecretBatchRequest) returns (StoreSecretBatchReply);
    rpc DecodeSecretBatch (DecodeSecretBatchRequest) returns (DecodeSecretBatchReply);
	rpc SignTx (SignTxRequest) returns (SignTxReply);
	rpc SignTxBatch (SignTxBatchRequest) returns (SignTxBatchReply);


	rpc Withdrawal(WithdrawalRequest) returns (WithdrawalReply);
	rpc GetOrderDetail(GetOrderDetailRequest) returns (GetOrderDetailReply);
	// 创建多签转账交易，返回用户签名页面地址
	rpc CreateMultiSignTransfer(CreateMultiSignTransferRequest) returns (CreateMultiSignTransferReply);

	//创建多签钱包，TRON为升级多签钱包，EVM为创建，返回多签地址
	rpc CreateMultiSignWallet(CreateMultiSignWalletRequest) returns (CreateMultiSignWalletReply);

	//获取当前多签钱包交易列表
	rpc GetMultiSignWalletTxList(GetMultiSignWalletTxListRequest) returns (GetMultiSignWalletTxListReply);

	//检查地址是否为多签地址
	rpc CheckMultiSignAddress(CheckMultiSignAddressRequest) returns (CheckMultiSignAddressReply);
}

message CreateAddressRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	optional string wallet_id =3; //钱包id
	optional string address_type =4;//创建类型
}

message CreateAddressReply {
	string address = 1; // 地址
	string storage_id = 2; // 存储ID
}


message StoreSecretRequest {
	string chain = 1;
	oneof secret {
		string private_key = 2;
		MnemonicSecret mnemonic = 3;
	}
}

message MnemonicSecret {
	string mnemonic = 1;
	uint32 path_index = 2;
}

message StoreSecretReply {
	string storage_id = 1;
	string address = 2;
}

message DecodeSecretRequest {
	string storage_id = 1;
}

message DecodeSecretReply {
	oneof secret {
		string private_key = 1;
		MnemonicSecret mnemonic = 2;
	}
	string address = 3;
}

message StoreSecretBatchRequest {
	repeated StoreSecretRequest secrets = 1;
}

message StoreSecretBatchReply {
	repeated StoreSecretReply storages = 1;
}

message DecodeSecretBatchRequest {
	repeated string storage_ids = 1;
}

message DecodeSecretBatchReply {
	repeated DecodeSecretReply storages = 1;
}

message SignTxRequest {
	string storage_id = 1;
	string raw_tx = 2;
	optional uint32 chain_id = 3;
}

message SignTxReply {
	string signed_tx = 1;
}

message SignTxBatchRequest {
	string storage_id = 1;
	repeated string raw_txs = 2;
	optional uint32 chain_id = 3;
}

message SignTxBatchReply {
	repeated string signed_txs = 1;
}

message CreateAddressBatchRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	uint32 count = 3; // 数量
	optional string wallet_id =4; //钱包id
	optional string address_type =5;//创建类型
}

message CreateAddressBatchReply {
	repeated CreateAddressReply replies = 1;
}

message WithdrawalRequest {
	string chain = 1;
	string network = 2;
 	double amount = 3; // 提现金额 示例：amount=132.56
	string storage_id = 4; //存储ID
	string to_address = 5; // 提现地址
	optional string memo = 6; // 备注
	string token_address = 7; // 代币地址
	optional string out_order_no = 8; // 外部订单号
	string user_address = 9;
  string merchant_id =10; //商户id
}

message WithdrawalReply {
	string biz_id = 1; 
	string out_order_no = 2; // 外部订单号
}

message Withdrawal {
	string token_address = 1; // 代币地址
	string token_symbol = 2; // 代币符号
	double amount = 3; // 金额
	string to_address = 4; // 目标提现地址
	string from_address = 5; // 源账户地址
}

message OrderDetail {
	string id = 1;
	string chain = 2; // 链
	string network = 3; // 网络
	string created_at = 4;
	string updated_at = 5;
	string storage_id = 6;
	string merchant_id = 7;
	string out_order_no = 8;
	optional string tx_hash = 9;
	int32 status = 10;
	optional string error_msg = 11;
	string memo = 12;
	optional Withdrawal withdrawal = 13; // 提现详情
}


message GetOrderDetailRequest {
	optional string biz_id = 1;  //Server服务订单ID
	optional string out_order_no = 2; // 外部订单号
}

message GetOrderDetailReply {
	OrderDetail order_detail = 1;
}

message CreateMultiSignTransferRequest {
	string chain = 1;
	string network = 2;
	string multi_sign_address = 3; //多签地址
	string to_address = 4; //目标地址
	double amount = 5; //金额
	string token_address = 6; //代币地址
	string storage_id = 7; //存储ID
}

message CreateMultiSignTransferReply {
	string url = 1; //用户 多签签名地址
}


// 升级多签钱包交易
//
// 多签钱包工作原理：
// 多签钱包通过设置多个所有者（控制者）和权重阈值来控制资产安全。
// 每个所有者都有对应的权重值，只有当签名者的权重总和达到或超过设定的阈值时，交易才能被执行。
//
// 示例场景：
//
// 场景1 - 低安全性配置：
// 阈值 = 1，设置3个所有者，权重分别为[1, 1, 1]
// 结果：三人中的任何一个控制者都可以单独控制该账户
// 风险：如果任何一个控制者受到攻击或私钥泄露，账户中的资产将会完全丢失
//
// 场景2 - 高安全性配置：
// 阈值 = 3，设置3个所有者，权重分别为[1, 1, 1]
// 结果：所有交易都需要所有三个控制者的签名才能执行
// 风险：如果任何一个控制者的钱包丢失或无法访问，其他两个控制者就无法管理账户，资产将被永久锁定
//
// 场景3 - 平衡配置（推荐）：
// 阈值 = 2，设置3个所有者，权重分别为[1, 1, 1]
// 结果：需要3个控制者中的任意2个签名才能执行交易
// 优势：既保证了安全性（防止单点故障），又保证了可用性（允许1个控制者离线或丢失）
//
// 场景4 - 不等权重配置：
// 阈值 = 3，设置3个所有者，权重分别为[2, 1, 1]
// 结果：主控制者（权重2）+任意一个副控制者（权重1）即可执行交易，或者两个副控制者共同签名
// 适用：适合有主要管理者和辅助管理者的组织结构
message CreateMultiSignWalletRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string current_owner = 3; // TRON为当前需要升级的钱包地址，EVM为创建多签钱包的owner地址
	uint32 threshold = 4; // 总权重阈值
	repeated MultiSigWalletItem owners = 5; // 所有者列表
	string storage_id = 6; //存储ID current_owner 发送交易地址对应的storage_id
}

message MultiSigWalletItem {
	string address = 1; // 地址
	uint32 weight = 2; // 权重
}

message CreateMultiSignWalletReply {
	string multi_sign_address = 1; //多签地址
	string tx_hash = 2; //交易哈希
}

message GetMultiSignWalletTxListRequest {
	string chain = 1;
	string network = 2;
	string multi_sign_address = 3; //多签地址
	int32 status = 4; // 查询条件 默认0:ALL 1:pending 2:当前multi_sign_address已经签署的pending列表
	int32 page = 5; // 页码
	int32 page_size = 6; // 每页数量
}

message SignItem {
	string address = 1; // 地址
	string signature = 2; // 签名
	string sign_time = 3; // 签名时间
	int32 status = 4; // 签名状态 0:未签名 1:已签名
}

message MultiSignWalletTxItem {
	string from_address = 1; //发起地址
	string to_address = 2; //接收地址
	string amount = 3; //金额
	string token_address = 4; //代币地址
	string id = 5; //交易ID，交易ID不一定是TxHash
	string created_at = 6; //创建时间
	string data = 7; //交易数据
	string tx_hash = 8; //交易哈希
	int32 threshold = 9; //签名数量阈值
	repeated SignItem sign_list = 10; //签名列表
	int32 status = 11; //交易状态 0:pending 1:success -1:failed
	string originator_address = 12; //发起地址
	int32 current_weight = 13; //当前交易权重
	string expired_time = 14; //过期时间
}

message GetMultiSignWalletTxListReply {
	repeated MultiSignWalletTxItem tx_list = 1; //交易列表
	//分页信息
	int32 page = 2; // 页码
	int32 page_size = 3; // 每页数量
	int32 total = 4; // 总数量
}

message CheckMultiSignAddressRequest {
	string chain = 1;
	string network = 2;
	string address = 3; //地址
}

message CheckMultiSignAddressReply {
	bool is_multi_sign_address = 1; //是否为多签地址
}