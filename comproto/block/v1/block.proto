syntax = "proto3";

package api.block.v1;

option go_package = "block/api/block/v1;v1";
option java_multiple_files = true;
option java_package = "api.block.v1";

service Block {
	//获取浏览器URL
	rpc GetExplorerURL (GetExplorerURLRequest) returns (GetExplorerURLReply);
	//验证地址
	rpc ValidateAddress (ValidateAddressRequest) returns (ValidateAddressReply);

	//代币模块
	rpc GetTokenBalance (GetTokenBalanceRequest) returns (GetTokenBalanceReply);
	rpc GetTokenBalanceBatch (GetTokenBalanceBatchRequest) returns (GetTokenBalanceBatchReply);
	rpc GetTokenBalanceBatchByItem (GetTokenBalanceBatchByItemRequest) returns (GetTokenBalanceBatchByItemReply);
	rpc GetTokenInfo (GetTokenInfoRequest) returns (GetTokenInfoReply);
	rpc GetTokenInfoBatch (GetTokenInfoBatchRequest) returns (GetTokenInfoBatchReply);
	rpc GetTokenPrice (GetTokenPriceRequest) returns (GetTokenPriceReply);
	rpc GetTokenPriceBatch (GetTokenPriceBatchRequest) returns (GetTokenPriceBatchReply);

	//交易模块

	//闪兑 返回RawTx交易数组 EVM包含Approve操作
	rpc Swap (SwapRequest) returns (SwapReply);
	//转账 返回RawTx交易
	rpc Transfer (TransferRequest) returns (TransferReply);
	//授权 返回RawTx交易 EVM
	rpc Approve (ApproveRequest)returns(ApproveReply);

	//广播交易上链
	rpc SendTransaction(SendTransactionRequest)returns(SendTransactionReply);
	rpc SendTransactionWithBundle(SendTransactionWithBundleRequest)returns(SendTransactionWithBundleReply);
	rpc CallBundle(CallBundleRequest) returns (CallBundleReply);
	rpc SendPrivateTransaction(SendPrivateTransactionRequest)returns (SendPrivateTransactionReply);

	rpc CreateAddress(CreateAddressRequest) returns (CreateAddressReply);
	rpc CreateAddressBatch(CreateAddressBatchRequest) returns (CreateAddressBatchReply);

	//获取交易信息
	rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashReply);

	//获取流动性
	rpc GetLiquidity(GetLiquidityRequest) returns (GetLiquidityReply);

	//获取未使用Nonce EVM
	rpc GetPendingNonce(GetPendingNonceRequest) returns (GetPendingNonceReply);

	//获取用户资源信息
	rpc GetUserResource(GetUserResourceRequest) returns (GetUserResourceReply);


	rpc GetTransferDetail(GetTransferDetailRequest) returns (GetTransferDetailReply);

	rpc GetChainID(GetChainIDRequest) returns (GetChainIDReply);


	//构建升级多签钱包交易
	rpc BuildUpgradeMultiSigWalletTx(BuildUpgradeMultiSigWalletTxRequest) returns (BuildUpgradeMultiSigWalletTxReply);

	//获取交易权重信息
	rpc GetTransactionWeight(GetTransactionWeightRequest) returns (GetTransactionWeightReply);


	//获取当前多签钱包交易列表
	rpc GetMultiSignWalletTxList(GetMultiSignWalletTxListRequest) returns (GetMultiSignWalletTxListReply);

	//检查地址是否为多签地址
	rpc CheckMultiSignAddress(CheckMultiSignAddressRequest) returns (CheckMultiSignAddressReply);
}

message NetworkConfigItem {
	string key = 1; //配置键
	string value = 2; //配置值
}
message NetworkItem {
	string name = 1; //网络名称
	string symbol = 2; //网络符号
	int32 type = 3; //网络类型
	repeated NetworkConfigItem configs = 5; //网络配置列表
}

message MetadataItem {
	string name = 1; //链名称
	string symbol = 2; //链符号
	repeated NetworkItem networks = 3; //网络列表
}


message GetTokenBalanceRequest {
	string address = 1; // 地址
	string chain = 2; // 链名称
	string network = 3; // 网络名称
	string contract_address = 4; // 合约地址
}

message GetTokenBalanceReply {
	 string balance = 1; // 代币余额
	 uint32 decimals = 2; // 代币小数位
	 string parse_balance = 3; // 解析后的余额
}

message GetTokenBalanceBatchRequest {
	repeated GetTokenBalanceRequest balance_items = 1; // 批量请求
}
message GetTokenBalanceBatchReply {
	map<string, GetTokenBalanceReply> balance_result = 1; // 地址到余额信息的映射
}

message GetTokenInfoRequest {
	string contract_address = 1; // 合约地址
	string chain = 2; // 链名称
	string network = 3; // 网络名称
}
message GetTokenInfoReply {
	string token_name = 1; // 代币名称
	string token_symbol = 2; // 代币符号
	uint32 token_decimals = 3; // 代币小数位
	string token_total_supply = 4; // 代币总供应量
	string parse_token_total_supply = 5; // 解析后的代币总供应量
}

message GetTokenInfoBatchRequest {
	repeated GetTokenInfoRequest info_items = 1; // 批量请求
}
message GetTokenInfoBatchReply {
	map<string, GetTokenInfoReply> info_result = 1; // 合约地址到代币信息的映射
}


message SendTransactionRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	repeated string signed_transaction = 3; // 交易，字符串
}
message SendTransactionReply {
	repeated string transaction_hash = 1; // 交易哈希 如果成功则有hash，且msg返回success
}

message SendTransactionWithBundleRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	repeated string signed_transaction = 3; // 交易，字符串
}
message SendTransactionWithBundleReply {
	string bundle_hash = 1; //捆绑包Hash
	repeated string transaction_hash = 2; // 交易哈希 如果成功则有hash，且msg返回success
}

message GetTransactionStatusRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string transaction_hash = 3; // 交易哈希
}
message GetTransactionStatusReply {
	bool success = 1; // 是否成功
	string error = 2; // 错误信息
}


message GetExplorerURLRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string url_type  = 3;//URL类型
	string data = 4; // 数据
}
message GetExplorerURLReply {
	string url = 1; // 浏览器URL
}

message ValidateAddressRequest {
	string address = 1; // 地址
	string chain = 2; // 链名称
	string network = 3; // 网络名称
}
message ValidateAddressReply {
	bool valid = 1; // 是否有效
}


message SubscribeTransactionRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
}

message SubscribeTransactionReply {
	repeated SubscribeTransactionItem transactions = 1; // 交易列表
}

message SubscribeTransactionItem {
	optional int64 block_number = 1; // 区块号
	optional int64 block_time = 2; // 区块时间 
	optional string from_address = 3; // 发起地址
	optional string to_address = 4; // 接收地址
	optional string value = 5; // 金额
	optional string hash = 6; // 交易哈希
	optional string symbol = 7; // 代币符号
	optional bool status = 8; // 交易状态
	optional string chain = 9; // 链名称
	optional string network = 10; // 网络名称
	optional string contract_address = 11; // 合约地址
	optional bool is_native = 12; // 是否为原生代币
}



message GetTokenPriceRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string contract_address = 3; // 合约地址
}
message GetTokenPriceReply {
	string native_token_price = 1; // 原生币价格
	uint32 native_token_decimals = 2; // 原生币精度
	string native_token_parse_price = 3; // 原生币解析价格

	string usd_token_price = 4; // 美元价格
	uint32 usd_token_decimals = 5; // 美元精度
	string usd_token_parse_price = 6; // 美元解析价格
}

message GetTokenPriceBatchRequest {
	repeated GetTokenPriceRequest price_items = 1; // 批量请求
}
message GetTokenPriceBatchReply {
	map<string, GetTokenPriceReply> price_result = 1; // 合约地址到价格信息的映射
}

message SwapRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string user_address = 3; // 用户地址
	string from_token_address = 4; // 发送代币地址
	string to_token_address = 5; // 接收代币地址
	string amount = 6; // 金额
	double slippage = 7; // 滑点
	optional SwapFeeItem before_fee = 8; // from token 前置手续费 
	optional SwapFeeItem after_fee = 9; // to token 后置手续费
	optional uint64 nonce = 10; // 第一笔Nonce
}

message SwapFeeItem {
	string recipient = 1; // 接收地址
	string amount = 2; // 手续费
}

message SwapReply {
	repeated string raw_transaction = 1; // 交易
}

message TransferRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string amount = 3; // 数量
    string token_address = 4; // 代币地址
	string user_address = 5; // 用户地址
    string to_address = 6; // 目标地址
	optional uint64 nonce = 7; // Nonce
	bool is_multi_sig = 8; // 是否为多签
}
message TransferReply {
	string raw_transaction = 1; // 交易
	optional TRONResourceDetail tron_resource_detail = 2; // TRON 资源详情
}
message TRONResourceDetail {
string energy = 1; // 当前交易的能量数
	string bandwidth = 2; // 当前交易的带宽数
	string user_energy = 3; // 当前用户能量数
	string user_bandwidth = 4; // 当前用户带宽数
}

message ApproveRequest{
	string chain = 1;
	string network = 2;
	string owner =3;
	string spender = 4;
	string amount = 5;
	string contract_address = 6;
	uint64 nonce = 7;
}

message ApproveReply{
	string raw_transaction = 1; // 交易
}

message CallBundleRequest {
	string chain = 1;                        // 指定的链
	string network =2; // 网络名称
	repeated string txs = 3;                 // 交易列表
}

message CallBundleReply {
  repeated string tx_hashes = 1; // 交易哈希列表
  map<string, string> errors = 2; // key: 交易哈希, value: 交易执行结果
}

message SendPrivateTransactionRequest {
  repeated string raw_txs = 1; // 多笔原始交易数据
  string chain = 2;            // 指定的链
  string network = 3; // 网络名称
}

message SendPrivateTransactionReply {
  repeated string hashes = 1;     // 成功的交易哈希列表
}

message CreateAddressRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
}

message CreateAddressReply {
	string address = 1; // 地址
	string private_key = 2; // 私钥
}

message CreateAddressBatchRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	uint32 count = 3; // 数量
}

message CreateAddressBatchReply {
	repeated CreateAddressReply addresses = 1; // 地址列表
}



message GetTransactionByHashRequest{
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string transaction_hash = 3; // 交易哈希
}

message GetTransactionByHashReply{
	string transaction_hash = 1; // 交易哈希
	string from_address = 2; // 发起地址
	repeated string to_address = 3; // 接收地址
	TransactionStatus status = 4; // 状态
	string block_number = 5; // 区块号
	string block_time = 6; // 区块时间
	string raw_transaction = 7; // 原始交易
	string error = 8; // 错误信息
}

enum TransactionStatus {
	TRANSACTION_STATUS_PENDING = 0; // 待处理
	TRANSACTION_STATUS_SUCCESS = 1; // 成功
	TRANSACTION_STATUS_FAILED = 2; // 失败
	TRANSACTION_STATUS_NOT_FOUND = 3; // 未找到
}

message GetLiquidityRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string token_address = 3; // 代币地址
}

message GetLiquidityReply {
	string liquidity_label = 1; // 流动性标签
	string liquidity_address = 2; // 流动性地址
	string liquidity_type = 3; // 流动性类型
	string liquidity_market_cap = 4; // 流动性市值
}


message GetPendingNonceRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string address = 3; // 地址
}

message GetPendingNonceReply {
	uint64 nonce = 1; // 非零
}

message GetUserResourceRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string address = 3; // 地址
}

message GetUserResourceReply {
	int64 user_bandwidth = 1; // 用户带宽
	int64 user_energy = 2; // 用户能量
}

message GetTransferDetailRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string transaction_hash = 3; // 交易哈希
}

message GetTransferDetailReply {
	int64 block_number = 1; // 区块号
	int64 block_time = 2; // 区块时间
	string from_address = 3; // 发送地址
	string to_address = 4; // 接收地址
	string value = 5; // 转账金额
	string hash = 6; // 交易哈希
	string contract_address = 7; // 合约地址
}


message GetTokenBalanceBatchByItemRequest {
	repeated GetTokenBalanceRequest balance_items = 1; // 批量请求
}
message GetTokenBalanceBatchByItemReply {
	repeated GetTokenBalanceReply balance_result = 1; // 地址到余额信息的映射
}

message GetChainIDRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
}

message GetChainIDReply {
	uint32 chain_id = 1; // 链ID
}

// 升级多签钱包交易
//
// 多签钱包工作原理：
// 多签钱包通过设置多个所有者（控制者）和权重阈值来控制资产安全。
// 每个所有者都有对应的权重值，只有当签名者的权重总和达到或超过设定的阈值时，交易才能被执行。
//
// 示例场景：
//
// 场景1 - 低安全性配置：
// 阈值 = 1，设置3个所有者，权重分别为[1, 1, 1]
// 结果：三人中的任何一个控制者都可以单独控制该账户
// 风险：如果任何一个控制者受到攻击或私钥泄露，账户中的资产将会完全丢失
//
// 场景2 - 高安全性配置：
// 阈值 = 3，设置3个所有者，权重分别为[1, 1, 1]
// 结果：所有交易都需要所有三个控制者的签名才能执行
// 风险：如果任何一个控制者的钱包丢失或无法访问，其他两个控制者就无法管理账户，资产将被永久锁定
//
// 场景3 - 平衡配置（推荐）：
// 阈值 = 2，设置3个所有者，权重分别为[1, 1, 1]
// 结果：需要3个控制者中的任意2个签名才能执行交易
// 优势：既保证了安全性（防止单点故障），又保证了可用性（允许1个控制者离线或丢失）
//
// 场景4 - 不等权重配置：
// 阈值 = 3，设置3个所有者，权重分别为[2, 1, 1]
// 结果：主控制者（权重2）+任意一个副控制者（权重1）即可执行交易，或者两个副控制者共同签名
// 适用：适合有主要管理者和辅助管理者的组织结构
message BuildUpgradeMultiSigWalletTxRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string current_owner = 3; // 当前需要升级的钱包地址
	uint32 threshold = 4; // 总权重阈值
	repeated MultiSigWalletItem owners = 5; // 所有者列表
}

message MultiSigWalletItem {
	string address = 1; // 地址
	uint32 weight = 2; // 权重
}

message BuildUpgradeMultiSigWalletTxReply {
	string raw_transaction = 1; // 交易
	string wallet_address = 2; // 钱包地址
	optional string sub_pvk = 3; // 子私钥Solana专用
}

message GetTransactionWeightRequest {
	string chain = 1; // 链名称
	string network = 2; // 网络名称
	string raw_transaction = 3; // 序列化后的交易
}

// SignerInfo 签名者信息
message SignerInfo {
	string address = 1; // 地址
	uint32 weight = 2; // 权重
}

// GetTransactionWeightReply 交易权重信息
message GetTransactionWeightReply {
	uint32 threshold_weight = 1; // 总权重门槛
	repeated SignerInfo permissions = 2; // 全部可以签名的地址和权重列表
	repeated SignerInfo approved_list = 3; // 当前已经签名的地址和权重列表
	uint32 remaining_weight = 4; // 剩余所需的权重
	repeated SignerInfo available_signers = 5; // 可选的签名地址+权重列表（排除已签名的）
}



message GetMultiSignWalletTxListRequest {
	string chain = 1;
	string network = 2;
	string multi_sign_address = 3; //多签地址
	int32 status = 4; // 查询条件 默认0:ALL 1:pending
	int32 page = 5; // 页码
	int32 page_size = 6; // 每页数量
}

message SignItem {
	string address = 1; // 地址
	string signature = 2; // 签名
	string sign_time = 3; // 签名时间
	int32 status = 4; // 签名状态 0:未签名 1:已签名
}

message MultiSignWalletTxItem {
	string from_address = 1; //发起地址
	string to_address = 2; //接收地址
	string amount = 3; //金额
	string token_address = 4; //代币地址
	string id = 5; //交易ID，交易ID不一定是TxHash
	string created_at = 6; //创建时间
	string data = 7; //交易数据
	string tx_hash = 8; //交易哈希
	int32 threshold = 9; //签名数量阈值
	repeated SignItem sign_list = 10; //签名列表
	int32 status = 11; //交易状态 0:pending 1:success -1:failed
	string originator_address = 12; //发起地址
	int32 current_weight = 13; //当前交易权重
	string expired_time = 14; //过期时间
}

message GetMultiSignWalletTxListReply {
	repeated MultiSignWalletTxItem tx_list = 1; //交易列表
	//分页信息
	int32 page = 2; // 页码
	int32 page_size = 3; // 每页数量
	int32 total = 4; // 总数量
}

message CheckMultiSignAddressRequest {
	string chain = 1;
	string network = 2;
	string address = 3; //地址
}

message CheckMultiSignAddressReply {
	bool is_multi_sign_address = 1; //是否为多签地址
}