syntax = "proto3";

package api.edge.v1;

option go_package = "asset_management_edge/api/edge/v1;v1";
option java_multiple_files = true;
option java_package = "api.edge.v1";

service Edge {
  // 检查地址是否在黑名单中
  rpc CheckBlacklistAddress(CheckBlacklistAddressRequest) returns (CheckBlacklistAddressResponse) {}
  // 获取支持的链列表
    rpc GetSupportedChains(GetSupportedChainsRequest) returns (GetSupportedChainsReply) {}
    // 根据链去获取支持的代币
    rpc GetTokenByChain(GetTokenByChainRequest) returns (GetTokenByChainReply) {}
    // 询价
    rpc GetQuote(GetQuoteRequest) returns (GetQuoteReply) {}
    // 跨链闪兑
    rpc Swap(SwapRequest) returns (SwapReply) {}
    // 订单详情
    rpc getTransDataById(OrderRequest) returns (OrderReply) {}
}


// 黑名单地址检查请求
message CheckBlacklistAddressRequest {
  string chain = 1; // 链名称
  string address = 2; // 待检查的地址
}

// 黑名单地址检查响应
message CheckBlacklistAddressResponse {
  bool is_blacklisted = 1; // 是否在黑名单中
}


// 请求消息
message GetSupportedChainsRequest {
}

// 响应消息
message GetSupportedChainsReply {
    repeated Chain chains = 1;
}

message Chain {
    string chain = 1;
    string contractAddress = 2;
}

// 请求消息
message GetTokenByChainRequest {
    string chain = 1;
}

// 响应消息
message GetTokenByChainReply {
    repeated Token tokens = 1;
}

message Token {
    string chain = 1;
    string symbol = 2;
    string name = 3;
    string address = 4;
    uint32 decimals = 5;
    string logoURI = 6;
    int32 isCrossEnable = 7;
    uint32 withdrawGas = 8;
}

// 请求消息
message GetQuoteRequest {
    string fromTokenAddress = 1;
    string toTokenAddress = 2;
    string fromTokenAmount = 3;
    string fromTokenChain = 4;
    string toTokenChain = 5;
}

// 响应消息
message GetQuoteReply {
    string amountOutMin = 1;
    string chainFee = 2;
    string contractAddress = 3;
    string depositMin = 4;
    string depositMax = 5;
    string dex = 6;
    float fee = 7;
    string feeToken = 8;
    string fromTokenAmount = 9;
    int32 fromTokenDecimal = 10;
    string toTokenAmount = 11;
    int32 toTokenDecimal = 12;
    repeated string path = 13;
    string logoUrl = 14;
    int64 estimatedTime = 15;
}

// 请求消息
message SwapRequest {
    string chain = 1;
    string fromTokenAddress = 2;
    string amountOutMin = 3;
    string toAddress = 4;
    string toTokenChain = 5;
    string fromTokenAmount = 6;
    string fromTokenChain = 7;
    string toTokenAddress = 8;
    string storageId = 9;
    string fromCoinCode = 10;
    string toCoinCode = 11;
    string sourceType = 12;
    string slippage = 13;
    string fee = 14;
    string feeReceivingAddress = 15;
    string fromBridgersContractAddress = 16;
}

// 响应消息
message SwapReply {
    string swapHash = 1;  // 跨链hash
    string frrHash = 2;  // 内扣手续费hash
    string orderId = 3;  // 订单号
}


// 请求消息
message OrderRequest {
    string orderId = 1;  // 订单号
}

// 响应消息
message OrderReply {
    string id = 1;                                    // 订单ID
    string orderId = 2;                              // 订单号
    string fromTokenAddress = 3;                      // 出售币种的合约地址
    string toTokenAddress = 4;                        // 目标币种的合约地址
    string fromTokenAmount = 5;                       // 出售币种数量
    string toTokenAmount = 6;                         // 目标币种预计得到数量
    string fromAddress = 7;                           // 用户出售币种的地址
    string slippage = 8;                             // 滑点
    string fromChain = 9;                            // 出售币种的链
    string toChain = 10;                             // 目标币种的链
    string hash = 11;                                // 存币hash
    string depositHashExplore = 12;                   // 存币区块浏览器地址
    string dexName = 13;                             // DEX名称
    string status = 14;                              // 订单状态
    string createTime = 15;                          // 订单创建时间
    string source = 16;                              // 渠道
    string toAddress = 17;                           // 目标地址
    string toHash = 18;                              // 发币hash
    string receiveHashExplore = 19;                   // 发币区块浏览器地址
    string equipmentNo = 20;                         // 设备号
    string refundCoinAmt = 21;                       // 退币数量
    string refundHash = 22;                          // 退币hash
    string refundHashExplore = 23;                    // 退币区块浏览器地址
    string refundReason = 24;                        // 退币原因（1-流动性不足、2-误差超过阈值、3-原币维护、4-黑名单、5-目标币维护、6-兑换数量不在范围内、7-存币超时、8-与风险地址交互）
    string fromCoinCode = 25;                        // 出售币种
    string toCoinCode = 26;                          // 目标币种
}