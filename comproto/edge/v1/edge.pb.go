// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: edge/v1/edge.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 黑名单地址检查请求
type CheckBlacklistAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`     // 链名称
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // 待检查的地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckBlacklistAddressRequest) Reset() {
	*x = CheckBlacklistAddressRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBlacklistAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlacklistAddressRequest) ProtoMessage() {}

func (x *CheckBlacklistAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlacklistAddressRequest.ProtoReflect.Descriptor instead.
func (*CheckBlacklistAddressRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{0}
}

func (x *CheckBlacklistAddressRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CheckBlacklistAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 黑名单地址检查响应
type CheckBlacklistAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsBlacklisted bool                   `protobuf:"varint,1,opt,name=is_blacklisted,json=isBlacklisted,proto3" json:"is_blacklisted,omitempty"` // 是否在黑名单中
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckBlacklistAddressResponse) Reset() {
	*x = CheckBlacklistAddressResponse{}
	mi := &file_edge_v1_edge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBlacklistAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlacklistAddressResponse) ProtoMessage() {}

func (x *CheckBlacklistAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlacklistAddressResponse.ProtoReflect.Descriptor instead.
func (*CheckBlacklistAddressResponse) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{1}
}

func (x *CheckBlacklistAddressResponse) GetIsBlacklisted() bool {
	if x != nil {
		return x.IsBlacklisted
	}
	return false
}

// 请求消息
type GetSupportedChainsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSupportedChainsRequest) Reset() {
	*x = GetSupportedChainsRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSupportedChainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedChainsRequest) ProtoMessage() {}

func (x *GetSupportedChainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedChainsRequest.ProtoReflect.Descriptor instead.
func (*GetSupportedChainsRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{2}
}

// 响应消息
type GetSupportedChainsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chains        []*Chain               `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSupportedChainsReply) Reset() {
	*x = GetSupportedChainsReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSupportedChainsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedChainsReply) ProtoMessage() {}

func (x *GetSupportedChainsReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedChainsReply.ProtoReflect.Descriptor instead.
func (*GetSupportedChainsReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{3}
}

func (x *GetSupportedChainsReply) GetChains() []*Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

type Chain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"` //链名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chain) Reset() {
	*x = Chain{}
	mi := &file_edge_v1_edge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{4}
}

func (x *Chain) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

// 请求消息
type GetTokenByChainRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenByChainRequest) Reset() {
	*x = GetTokenByChainRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenByChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenByChainRequest) ProtoMessage() {}

func (x *GetTokenByChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenByChainRequest.ProtoReflect.Descriptor instead.
func (*GetTokenByChainRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{5}
}

func (x *GetTokenByChainRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

// 响应消息
type GetTokenByChainReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tokens        []*Token               `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenByChainReply) Reset() {
	*x = GetTokenByChainReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenByChainReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenByChainReply) ProtoMessage() {}

func (x *GetTokenByChainReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenByChainReply.ProtoReflect.Descriptor instead.
func (*GetTokenByChainReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{6}
}

func (x *GetTokenByChainReply) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`        //链名
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`      // 币种编符号
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`          //币种名称
	Address       string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`    //币种合约地址
	Decimals      uint32                 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"` //精度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_edge_v1_edge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{7}
}

func (x *Token) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Token) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type AddressMaliciousRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 地址
	Chain         string                 `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`     // 链名称
	Network       string                 `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"` // 网络名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressMaliciousRequest) Reset() {
	*x = AddressMaliciousRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressMaliciousRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressMaliciousRequest) ProtoMessage() {}

func (x *AddressMaliciousRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressMaliciousRequest.ProtoReflect.Descriptor instead.
func (*AddressMaliciousRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{8}
}

func (x *AddressMaliciousRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressMaliciousRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *AddressMaliciousRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type AddressMaliciousReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //等级
	Score         int64                  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`    //评分
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddressMaliciousReply) Reset() {
	*x = AddressMaliciousReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressMaliciousReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressMaliciousReply) ProtoMessage() {}

func (x *AddressMaliciousReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressMaliciousReply.ProtoReflect.Descriptor instead.
func (*AddressMaliciousReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{9}
}

func (x *AddressMaliciousReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *AddressMaliciousReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddressMaliciousReply) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 请求消息
type GetQuoteRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FromTokenAddress string                 `protobuf:"bytes,1,opt,name=fromTokenAddress,proto3" json:"fromTokenAddress,omitempty"` //出售币种合约地址（可通过获取币种列表中的address字段获得）
	ToTokenAddress   string                 `protobuf:"bytes,2,opt,name=toTokenAddress,proto3" json:"toTokenAddress,omitempty"`     //获得币种合约地址（可通过获取币种列表中的address字段获得）
	FromTokenAmount  string                 `protobuf:"bytes,3,opt,name=fromTokenAmount,proto3" json:"fromTokenAmount,omitempty"`   //出售币种数量(带精度)
	FromTokenChain   string                 `protobuf:"bytes,4,opt,name=fromTokenChain,proto3" json:"fromTokenChain,omitempty"`     //出售币种链（可通过获取币种列表中的chain字段获得,详细支持链的情况可查看【基本说明】）
	ToTokenChain     string                 `protobuf:"bytes,5,opt,name=toTokenChain,proto3" json:"toTokenChain,omitempty"`         //获得币种链（可通过获取币种列表中的chain字段获得，详细支持链的情况可查看【基本说明】）
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetQuoteRequest) Reset() {
	*x = GetQuoteRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuoteRequest) ProtoMessage() {}

func (x *GetQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuoteRequest.ProtoReflect.Descriptor instead.
func (*GetQuoteRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{10}
}

func (x *GetQuoteRequest) GetFromTokenAddress() string {
	if x != nil {
		return x.FromTokenAddress
	}
	return ""
}

func (x *GetQuoteRequest) GetToTokenAddress() string {
	if x != nil {
		return x.ToTokenAddress
	}
	return ""
}

func (x *GetQuoteRequest) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *GetQuoteRequest) GetFromTokenChain() string {
	if x != nil {
		return x.FromTokenChain
	}
	return ""
}

func (x *GetQuoteRequest) GetToTokenChain() string {
	if x != nil {
		return x.ToTokenChain
	}
	return ""
}

// 响应消息
type GetQuoteReply struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AmountOutMin     string                 `protobuf:"bytes,1,opt,name=amountOutMin,proto3" json:"amountOutMin,omitempty"`          // 最小到账数量 带精度
	ChainFee         string                 `protobuf:"bytes,2,opt,name=chainFee,proto3" json:"chainFee,omitempty"`                  // 链上矿工费
	ContractAddress  string                 `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`    // bridgers合约地址
	DepositMin       string                 `protobuf:"bytes,4,opt,name=depositMin,proto3" json:"depositMin,omitempty"`              //最小存入数量 带精度
	DepositMax       string                 `protobuf:"bytes,5,opt,name=depositMax,proto3" json:"depositMax,omitempty"`              //最大存入数量 带精度
	Fee              float32                `protobuf:"fixed32,6,opt,name=fee,proto3" json:"fee,omitempty"`                          // 手续费比例
	FeeToken         string                 `protobuf:"bytes,7,opt,name=feeToken,proto3" json:"feeToken,omitempty"`                  // 手续费币种
	FromTokenAmount  string                 `protobuf:"bytes,8,opt,name=fromTokenAmount,proto3" json:"fromTokenAmount,omitempty"`    // 出售币种数量 带精度
	FromTokenDecimal int32                  `protobuf:"varint,9,opt,name=fromTokenDecimal,proto3" json:"fromTokenDecimal,omitempty"` // 出售币种精度
	ToTokenAmount    string                 `protobuf:"bytes,10,opt,name=toTokenAmount,proto3" json:"toTokenAmount,omitempty"`       // 发币数量 不带精度
	ToTokenDecimal   int32                  `protobuf:"varint,11,opt,name=toTokenDecimal,proto3" json:"toTokenDecimal,omitempty"`    // 发币精度
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetQuoteReply) Reset() {
	*x = GetQuoteReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuoteReply) ProtoMessage() {}

func (x *GetQuoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuoteReply.ProtoReflect.Descriptor instead.
func (*GetQuoteReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{11}
}

func (x *GetQuoteReply) GetAmountOutMin() string {
	if x != nil {
		return x.AmountOutMin
	}
	return ""
}

func (x *GetQuoteReply) GetChainFee() string {
	if x != nil {
		return x.ChainFee
	}
	return ""
}

func (x *GetQuoteReply) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetQuoteReply) GetDepositMin() string {
	if x != nil {
		return x.DepositMin
	}
	return ""
}

func (x *GetQuoteReply) GetDepositMax() string {
	if x != nil {
		return x.DepositMax
	}
	return ""
}

func (x *GetQuoteReply) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *GetQuoteReply) GetFeeToken() string {
	if x != nil {
		return x.FeeToken
	}
	return ""
}

func (x *GetQuoteReply) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *GetQuoteReply) GetFromTokenDecimal() int32 {
	if x != nil {
		return x.FromTokenDecimal
	}
	return 0
}

func (x *GetQuoteReply) GetToTokenAmount() string {
	if x != nil {
		return x.ToTokenAmount
	}
	return ""
}

func (x *GetQuoteReply) GetToTokenDecimal() int32 {
	if x != nil {
		return x.ToTokenDecimal
	}
	return 0
}

// 请求消息
type SwapRequest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	FromTokenAddress            string                 `protobuf:"bytes,1,opt,name=fromTokenAddress,proto3" json:"fromTokenAddress,omitempty"`                        //出售币种合约地址（可通过获取币种列表中的address字段获得）
	AmountOutMin                string                 `protobuf:"bytes,2,opt,name=amountOutMin,proto3" json:"amountOutMin,omitempty"`                                //出售币种数量(带精度，可通过询价接口里的fromTokenAmount字段获得)
	ToAddress                   string                 `protobuf:"bytes,3,opt,name=toAddress,proto3" json:"toAddress,omitempty"`                                      //接受地址
	ToTokenChain                string                 `protobuf:"bytes,4,opt,name=toTokenChain,proto3" json:"toTokenChain,omitempty"`                                //获得币种链（可通过获取币种列表中的chain字段获得，详细支持链的情况可查看【基本说明】）
	FromTokenAmount             string                 `protobuf:"bytes,5,opt,name=fromTokenAmount,proto3" json:"fromTokenAmount,omitempty"`                          //出售币种数量(带精度，可通过询价接口里的fromTokenAmount字段获得)
	FromTokenChain              string                 `protobuf:"bytes,6,opt,name=fromTokenChain,proto3" json:"fromTokenChain,omitempty"`                            //出售币种链（可通过获取币种列表中的chain字段获得，详细支持链的情况可查看【基本说明】）
	ToTokenAddress              string                 `protobuf:"bytes,7,opt,name=toTokenAddress,proto3" json:"toTokenAddress,omitempty"`                            //获得币种合约地址（可通过获取币种列表中的address字段获得）
	FromCoinCode                string                 `protobuf:"bytes,8,opt,name=fromCoinCode,proto3" json:"fromCoinCode,omitempty"`                                //出售代币名称（可通过获取币种列表中的symbol字段获得）
	ToCoinCode                  string                 `protobuf:"bytes,9,opt,name=toCoinCode,proto3" json:"toCoinCode,omitempty"`                                    //获得代币名称（可通过获取币种列表中的symbol字段获得）
	Slippage                    string                 `protobuf:"bytes,10,opt,name=slippage,proto3" json:"slippage,omitempty"`                                       //滑点，例如：0.1（代表10%）
	FeeReceivingAddress         string                 `protobuf:"bytes,11,opt,name=feeReceivingAddress,proto3" json:"feeReceivingAddress,omitempty"`                 //内扣手续费接收地址
	FromBridgersContractAddress string                 `protobuf:"bytes,12,opt,name=fromBridgersContractAddress,proto3" json:"fromBridgersContractAddress,omitempty"` //出售币种bridgers合约地址
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SwapRequest) Reset() {
	*x = SwapRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapRequest) ProtoMessage() {}

func (x *SwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapRequest.ProtoReflect.Descriptor instead.
func (*SwapRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{12}
}

func (x *SwapRequest) GetFromTokenAddress() string {
	if x != nil {
		return x.FromTokenAddress
	}
	return ""
}

func (x *SwapRequest) GetAmountOutMin() string {
	if x != nil {
		return x.AmountOutMin
	}
	return ""
}

func (x *SwapRequest) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SwapRequest) GetToTokenChain() string {
	if x != nil {
		return x.ToTokenChain
	}
	return ""
}

func (x *SwapRequest) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *SwapRequest) GetFromTokenChain() string {
	if x != nil {
		return x.FromTokenChain
	}
	return ""
}

func (x *SwapRequest) GetToTokenAddress() string {
	if x != nil {
		return x.ToTokenAddress
	}
	return ""
}

func (x *SwapRequest) GetFromCoinCode() string {
	if x != nil {
		return x.FromCoinCode
	}
	return ""
}

func (x *SwapRequest) GetToCoinCode() string {
	if x != nil {
		return x.ToCoinCode
	}
	return ""
}

func (x *SwapRequest) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

func (x *SwapRequest) GetFeeReceivingAddress() string {
	if x != nil {
		return x.FeeReceivingAddress
	}
	return ""
}

func (x *SwapRequest) GetFromBridgersContractAddress() string {
	if x != nil {
		return x.FromBridgersContractAddress
	}
	return ""
}

// 响应消息
type SwapReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SwapHash      string                 `protobuf:"bytes,1,opt,name=swapHash,proto3" json:"swapHash,omitempty"` // 跨链hash
	FeeHash       string                 `protobuf:"bytes,2,opt,name=feeHash,proto3" json:"feeHash,omitempty"`   // 内扣手续费hash
	OrderId       string                 `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`   // 订单号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapReply) Reset() {
	*x = SwapReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapReply) ProtoMessage() {}

func (x *SwapReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapReply.ProtoReflect.Descriptor instead.
func (*SwapReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{13}
}

func (x *SwapReply) GetSwapHash() string {
	if x != nil {
		return x.SwapHash
	}
	return ""
}

func (x *SwapReply) GetFeeHash() string {
	if x != nil {
		return x.FeeHash
	}
	return ""
}

func (x *SwapReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 请求消息
type OrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"` // 订单号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{14}
}

func (x *OrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 响应消息
type OrderReply struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 订单ID
	OrderId            string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`                        // 订单号
	FromTokenAddress   string                 `protobuf:"bytes,3,opt,name=fromTokenAddress,proto3" json:"fromTokenAddress,omitempty"`      // 出售币种的合约地址
	ToTokenAddress     string                 `protobuf:"bytes,4,opt,name=toTokenAddress,proto3" json:"toTokenAddress,omitempty"`          // 目标币种的合约地址
	FromTokenAmount    string                 `protobuf:"bytes,5,opt,name=fromTokenAmount,proto3" json:"fromTokenAmount,omitempty"`        // 出售币种数量
	ToTokenAmount      string                 `protobuf:"bytes,6,opt,name=toTokenAmount,proto3" json:"toTokenAmount,omitempty"`            // 目标币种预计得到数量
	FromAddress        string                 `protobuf:"bytes,7,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`                // 用户出售币种的地址
	Slippage           string                 `protobuf:"bytes,8,opt,name=slippage,proto3" json:"slippage,omitempty"`                      // 滑点
	FromChain          string                 `protobuf:"bytes,9,opt,name=fromChain,proto3" json:"fromChain,omitempty"`                    // 出售币种的链
	ToChain            string                 `protobuf:"bytes,10,opt,name=toChain,proto3" json:"toChain,omitempty"`                       // 目标币种的链
	Hash               string                 `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`                             // 存币hash
	DepositHashExplore string                 `protobuf:"bytes,12,opt,name=depositHashExplore,proto3" json:"depositHashExplore,omitempty"` // 存币区块浏览器地址
	DexName            string                 `protobuf:"bytes,13,opt,name=dexName,proto3" json:"dexName,omitempty"`                       // DEX名称
	Status             string                 `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                         // 订单状态
	CreateTime         string                 `protobuf:"bytes,15,opt,name=createTime,proto3" json:"createTime,omitempty"`                 // 订单创建时间
	Source             string                 `protobuf:"bytes,16,opt,name=source,proto3" json:"source,omitempty"`                         // 渠道
	ToAddress          string                 `protobuf:"bytes,17,opt,name=toAddress,proto3" json:"toAddress,omitempty"`                   // 目标地址
	ToHash             string                 `protobuf:"bytes,18,opt,name=toHash,proto3" json:"toHash,omitempty"`                         // 发币hash
	ReceiveHashExplore string                 `protobuf:"bytes,19,opt,name=receiveHashExplore,proto3" json:"receiveHashExplore,omitempty"` // 发币区块浏览器地址
	EquipmentNo        string                 `protobuf:"bytes,20,opt,name=equipmentNo,proto3" json:"equipmentNo,omitempty"`               // 设备号
	RefundCoinAmt      string                 `protobuf:"bytes,21,opt,name=refundCoinAmt,proto3" json:"refundCoinAmt,omitempty"`           // 退币数量
	RefundHash         string                 `protobuf:"bytes,22,opt,name=refundHash,proto3" json:"refundHash,omitempty"`                 // 退币hash
	RefundHashExplore  string                 `protobuf:"bytes,23,opt,name=refundHashExplore,proto3" json:"refundHashExplore,omitempty"`   // 退币区块浏览器地址
	RefundReason       string                 `protobuf:"bytes,24,opt,name=refundReason,proto3" json:"refundReason,omitempty"`             // 退币原因（1-流动性不足、2-误差超过阈值、3-原币维护、4-黑名单、5-目标币维护、6-兑换数量不在范围内、7-存币超时、8-与风险地址交互）
	FromCoinCode       string                 `protobuf:"bytes,25,opt,name=fromCoinCode,proto3" json:"fromCoinCode,omitempty"`             // 出售币种
	ToCoinCode         string                 `protobuf:"bytes,26,opt,name=toCoinCode,proto3" json:"toCoinCode,omitempty"`                 // 目标币种
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OrderReply) Reset() {
	*x = OrderReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReply) ProtoMessage() {}

func (x *OrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReply.ProtoReflect.Descriptor instead.
func (*OrderReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{15}
}

func (x *OrderReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderReply) GetFromTokenAddress() string {
	if x != nil {
		return x.FromTokenAddress
	}
	return ""
}

func (x *OrderReply) GetToTokenAddress() string {
	if x != nil {
		return x.ToTokenAddress
	}
	return ""
}

func (x *OrderReply) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *OrderReply) GetToTokenAmount() string {
	if x != nil {
		return x.ToTokenAmount
	}
	return ""
}

func (x *OrderReply) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *OrderReply) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

func (x *OrderReply) GetFromChain() string {
	if x != nil {
		return x.FromChain
	}
	return ""
}

func (x *OrderReply) GetToChain() string {
	if x != nil {
		return x.ToChain
	}
	return ""
}

func (x *OrderReply) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *OrderReply) GetDepositHashExplore() string {
	if x != nil {
		return x.DepositHashExplore
	}
	return ""
}

func (x *OrderReply) GetDexName() string {
	if x != nil {
		return x.DexName
	}
	return ""
}

func (x *OrderReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderReply) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OrderReply) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *OrderReply) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *OrderReply) GetToHash() string {
	if x != nil {
		return x.ToHash
	}
	return ""
}

func (x *OrderReply) GetReceiveHashExplore() string {
	if x != nil {
		return x.ReceiveHashExplore
	}
	return ""
}

func (x *OrderReply) GetEquipmentNo() string {
	if x != nil {
		return x.EquipmentNo
	}
	return ""
}

func (x *OrderReply) GetRefundCoinAmt() string {
	if x != nil {
		return x.RefundCoinAmt
	}
	return ""
}

func (x *OrderReply) GetRefundHash() string {
	if x != nil {
		return x.RefundHash
	}
	return ""
}

func (x *OrderReply) GetRefundHashExplore() string {
	if x != nil {
		return x.RefundHashExplore
	}
	return ""
}

func (x *OrderReply) GetRefundReason() string {
	if x != nil {
		return x.RefundReason
	}
	return ""
}

func (x *OrderReply) GetFromCoinCode() string {
	if x != nil {
		return x.FromCoinCode
	}
	return ""
}

func (x *OrderReply) GetToCoinCode() string {
	if x != nil {
		return x.ToCoinCode
	}
	return ""
}

type CreateSwapOrderRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FromTokenAddress string                 `protobuf:"bytes,1,opt,name=fromTokenAddress,proto3" json:"fromTokenAddress,omitempty"` //出售币种合约地址（可通过获取币种列表中的address字段获得）
	ToTokenAddress   string                 `protobuf:"bytes,2,opt,name=toTokenAddress,proto3" json:"toTokenAddress,omitempty"`     //获得币种合约地址（可通过获取币种列表中的address字段获得）
	FromTokenAmount  string                 `protobuf:"bytes,3,opt,name=fromTokenAmount,proto3" json:"fromTokenAmount,omitempty"`   //出售币种数量(带精度)
	FromTokenChain   string                 `protobuf:"bytes,4,opt,name=fromTokenChain,proto3" json:"fromTokenChain,omitempty"`     //出售币种链（可通过获取币种列表中的chain字段获得,详细支持链的情况可查看【基本说明】）
	ToTokenChain     string                 `protobuf:"bytes,5,opt,name=toTokenChain,proto3" json:"toTokenChain,omitempty"`         //获得币种链（可通过获取币种列表中的chain字段获得，详细支持链的情况可查看【基本说明】）
	ToUserAddress    string                 `protobuf:"bytes,6,opt,name=toUserAddress,proto3" json:"toUserAddress,omitempty"`       // 目标用户地址
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateSwapOrderRequest) Reset() {
	*x = CreateSwapOrderRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSwapOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwapOrderRequest) ProtoMessage() {}

func (x *CreateSwapOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwapOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateSwapOrderRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{16}
}

func (x *CreateSwapOrderRequest) GetFromTokenAddress() string {
	if x != nil {
		return x.FromTokenAddress
	}
	return ""
}

func (x *CreateSwapOrderRequest) GetToTokenAddress() string {
	if x != nil {
		return x.ToTokenAddress
	}
	return ""
}

func (x *CreateSwapOrderRequest) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *CreateSwapOrderRequest) GetFromTokenChain() string {
	if x != nil {
		return x.FromTokenChain
	}
	return ""
}

func (x *CreateSwapOrderRequest) GetToTokenChain() string {
	if x != nil {
		return x.ToTokenChain
	}
	return ""
}

func (x *CreateSwapOrderRequest) GetToUserAddress() string {
	if x != nil {
		return x.ToUserAddress
	}
	return ""
}

type CreateSwapOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`                 // 链
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`             // 订单号
	QrCode        string                 `protobuf:"bytes,3,opt,name=qrCode,proto3" json:"qrCode,omitempty"`               // 二维码
	Amount        string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`               // 金额
	Address       string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`             // 地址
	TokenSymbol   string                 `protobuf:"bytes,6,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`     // 符号
	TokenAddress  string                 `protobuf:"bytes,7,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`   // 币种地址
	TokenUIAmount string                 `protobuf:"bytes,8,opt,name=tokenUIAmount,proto3" json:"tokenUIAmount,omitempty"` // 币种数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSwapOrderReply) Reset() {
	*x = CreateSwapOrderReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSwapOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwapOrderReply) ProtoMessage() {}

func (x *CreateSwapOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwapOrderReply.ProtoReflect.Descriptor instead.
func (*CreateSwapOrderReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{17}
}

func (x *CreateSwapOrderReply) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateSwapOrderReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateSwapOrderReply) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *CreateSwapOrderReply) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreateSwapOrderReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateSwapOrderReply) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *CreateSwapOrderReply) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *CreateSwapOrderReply) GetTokenUIAmount() string {
	if x != nil {
		return x.TokenUIAmount
	}
	return ""
}

type GetOrderDetailRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	OrderId            string                 `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`                       // 订单号
	ReceiveOnChainHash string                 `protobuf:"bytes,2,opt,name=receiveOnChainHash,proto3" json:"receiveOnChainHash,omitempty"` // 接收用户资金的链上Hash
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetOrderDetailRequest) Reset() {
	*x = GetOrderDetailRequest{}
	mi := &file_edge_v1_edge_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderDetailRequest) ProtoMessage() {}

func (x *GetOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*GetOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrderDetailRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetOrderDetailRequest) GetReceiveOnChainHash() string {
	if x != nil {
		return x.ReceiveOnChainHash
	}
	return ""
}

type GetOrderDetailReply struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OrderId              string                 `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`                            // 订单号
	ReceiveOnChainHash   string                 `protobuf:"bytes,2,opt,name=receiveOnChainHash,proto3" json:"receiveOnChainHash,omitempty"`      // 接收用户资金的链上Hash
	FromOnChainHash      string                 `protobuf:"bytes,3,opt,name=fromOnChainHash,proto3" json:"fromOnChainHash,omitempty"`            // 出售币种的链上Hash
	ToOnChainHash        string                 `protobuf:"bytes,4,opt,name=toOnChainHash,proto3" json:"toOnChainHash,omitempty"`                // 目标币种的链上Hash
	Status               string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                              // 订单状态 0:待支付 1:已支付 2:等待上链 3:上链成功 4:异常
	Message              string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`                            // 订单状态描述
	ReceiveAmountIn      string                 `protobuf:"bytes,12,opt,name=receiveAmountIn,proto3" json:"receiveAmountIn,omitempty"`           // 接收用户资金的金额
	ReceiveAddress       string                 `protobuf:"bytes,13,opt,name=receiveAddress,proto3" json:"receiveAddress,omitempty"`             // 接收用户资金的地址
	ReceiveStorageId     string                 `protobuf:"bytes,14,opt,name=receiveStorageId,proto3" json:"receiveStorageId,omitempty"`         // 接收用户资金的storageID
	ReceiveChain         string                 `protobuf:"bytes,15,opt,name=receiveChain,proto3" json:"receiveChain,omitempty"`                 // 接收用户资金的链
	ReceiveTokenAddress  string                 `protobuf:"bytes,16,opt,name=receiveTokenAddress,proto3" json:"receiveTokenAddress,omitempty"`   // 接收用户资金的币种合约地址
	ReceiveTokenSymbol   string                 `protobuf:"bytes,17,opt,name=receiveTokenSymbol,proto3" json:"receiveTokenSymbol,omitempty"`     // 接收用户资金的币种符号
	ReceiveTokenDecimals string                 `protobuf:"bytes,18,opt,name=receiveTokenDecimals,proto3" json:"receiveTokenDecimals,omitempty"` // 接收用户资金的币种精度
	CreatedAt            string                 `protobuf:"bytes,19,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                       // 创建时间
	PendingExpire        string                 `protobuf:"bytes,20,opt,name=pendingExpire,proto3" json:"pendingExpire,omitempty"`               // 待支付订单过期时间
	ExpireTime           string                 `protobuf:"bytes,21,opt,name=expireTime,proto3" json:"expireTime,omitempty"`                     // 订单过期时间
	// Swap信息
	FromTokenAddress  string `protobuf:"bytes,22,opt,name=fromTokenAddress,proto3" json:"fromTokenAddress,omitempty"`   // 出售币种合约地址
	FromTokenAmount   string `protobuf:"bytes,24,opt,name=fromTokenAmount,proto3" json:"fromTokenAmount,omitempty"`     // 出售币种数量(带精度)
	FromTokenChain    string `protobuf:"bytes,25,opt,name=fromTokenChain,proto3" json:"fromTokenChain,omitempty"`       // 出售币种链
	FromTokenSymbol   string `protobuf:"bytes,27,opt,name=fromTokenSymbol,proto3" json:"fromTokenSymbol,omitempty"`     // 出售币种符号
	FromTokenDecimals string `protobuf:"bytes,28,opt,name=fromTokenDecimals,proto3" json:"fromTokenDecimals,omitempty"` // 出售币种精度
	ToTokenAddress    string `protobuf:"bytes,23,opt,name=toTokenAddress,proto3" json:"toTokenAddress,omitempty"`       // 获得币种合约地址
	ToTokenChain      string `protobuf:"bytes,26,opt,name=toTokenChain,proto3" json:"toTokenChain,omitempty"`           // 获得币种链
	ToTokenSymbol     string `protobuf:"bytes,29,opt,name=toTokenSymbol,proto3" json:"toTokenSymbol,omitempty"`         // 获得币种符号
	ToTokenDecimals   string `protobuf:"bytes,30,opt,name=toTokenDecimals,proto3" json:"toTokenDecimals,omitempty"`     // 获得币种精度
	ToTokenAmount     string `protobuf:"bytes,31,opt,name=toTokenAmount,proto3" json:"toTokenAmount,omitempty"`         // 获得币种数量(预估最小到账数量)
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetOrderDetailReply) Reset() {
	*x = GetOrderDetailReply{}
	mi := &file_edge_v1_edge_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderDetailReply) ProtoMessage() {}

func (x *GetOrderDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_v1_edge_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderDetailReply.ProtoReflect.Descriptor instead.
func (*GetOrderDetailReply) Descriptor() ([]byte, []int) {
	return file_edge_v1_edge_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrderDetailReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveOnChainHash() string {
	if x != nil {
		return x.ReceiveOnChainHash
	}
	return ""
}

func (x *GetOrderDetailReply) GetFromOnChainHash() string {
	if x != nil {
		return x.FromOnChainHash
	}
	return ""
}

func (x *GetOrderDetailReply) GetToOnChainHash() string {
	if x != nil {
		return x.ToOnChainHash
	}
	return ""
}

func (x *GetOrderDetailReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetOrderDetailReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveAmountIn() string {
	if x != nil {
		return x.ReceiveAmountIn
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveAddress() string {
	if x != nil {
		return x.ReceiveAddress
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveStorageId() string {
	if x != nil {
		return x.ReceiveStorageId
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveChain() string {
	if x != nil {
		return x.ReceiveChain
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveTokenAddress() string {
	if x != nil {
		return x.ReceiveTokenAddress
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveTokenSymbol() string {
	if x != nil {
		return x.ReceiveTokenSymbol
	}
	return ""
}

func (x *GetOrderDetailReply) GetReceiveTokenDecimals() string {
	if x != nil {
		return x.ReceiveTokenDecimals
	}
	return ""
}

func (x *GetOrderDetailReply) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetOrderDetailReply) GetPendingExpire() string {
	if x != nil {
		return x.PendingExpire
	}
	return ""
}

func (x *GetOrderDetailReply) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *GetOrderDetailReply) GetFromTokenAddress() string {
	if x != nil {
		return x.FromTokenAddress
	}
	return ""
}

func (x *GetOrderDetailReply) GetFromTokenAmount() string {
	if x != nil {
		return x.FromTokenAmount
	}
	return ""
}

func (x *GetOrderDetailReply) GetFromTokenChain() string {
	if x != nil {
		return x.FromTokenChain
	}
	return ""
}

func (x *GetOrderDetailReply) GetFromTokenSymbol() string {
	if x != nil {
		return x.FromTokenSymbol
	}
	return ""
}

func (x *GetOrderDetailReply) GetFromTokenDecimals() string {
	if x != nil {
		return x.FromTokenDecimals
	}
	return ""
}

func (x *GetOrderDetailReply) GetToTokenAddress() string {
	if x != nil {
		return x.ToTokenAddress
	}
	return ""
}

func (x *GetOrderDetailReply) GetToTokenChain() string {
	if x != nil {
		return x.ToTokenChain
	}
	return ""
}

func (x *GetOrderDetailReply) GetToTokenSymbol() string {
	if x != nil {
		return x.ToTokenSymbol
	}
	return ""
}

func (x *GetOrderDetailReply) GetToTokenDecimals() string {
	if x != nil {
		return x.ToTokenDecimals
	}
	return ""
}

func (x *GetOrderDetailReply) GetToTokenAmount() string {
	if x != nil {
		return x.ToTokenAmount
	}
	return ""
}

var File_edge_v1_edge_proto protoreflect.FileDescriptor

var file_edge_v1_edge_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x22, 0x4e, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x46, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x1d, 0x0a,
	0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x2e, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x42, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0x7f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x22, 0x63, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6c, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x5f, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x61,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x22, 0xed, 0x03, 0x0a, 0x0b, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x40, 0x0a, 0x1b, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x65, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x28, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x06, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69,
	0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69,
	0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x6d, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x88, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x49, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x49, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x95, 0x08, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x6e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x4f, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x6f, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x9e, 0x06, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x70, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x35, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x24, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_edge_v1_edge_proto_rawDescOnce sync.Once
	file_edge_v1_edge_proto_rawDescData []byte
)

func file_edge_v1_edge_proto_rawDescGZIP() []byte {
	file_edge_v1_edge_proto_rawDescOnce.Do(func() {
		file_edge_v1_edge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_edge_v1_edge_proto_rawDesc), len(file_edge_v1_edge_proto_rawDesc)))
	})
	return file_edge_v1_edge_proto_rawDescData
}

var file_edge_v1_edge_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_edge_v1_edge_proto_goTypes = []any{
	(*CheckBlacklistAddressRequest)(nil),  // 0: api.edge.v1.CheckBlacklistAddressRequest
	(*CheckBlacklistAddressResponse)(nil), // 1: api.edge.v1.CheckBlacklistAddressResponse
	(*GetSupportedChainsRequest)(nil),     // 2: api.edge.v1.GetSupportedChainsRequest
	(*GetSupportedChainsReply)(nil),       // 3: api.edge.v1.GetSupportedChainsReply
	(*Chain)(nil),                         // 4: api.edge.v1.Chain
	(*GetTokenByChainRequest)(nil),        // 5: api.edge.v1.GetTokenByChainRequest
	(*GetTokenByChainReply)(nil),          // 6: api.edge.v1.GetTokenByChainReply
	(*Token)(nil),                         // 7: api.edge.v1.Token
	(*AddressMaliciousRequest)(nil),       // 8: api.edge.v1.AddressMaliciousRequest
	(*AddressMaliciousReply)(nil),         // 9: api.edge.v1.AddressMaliciousReply
	(*GetQuoteRequest)(nil),               // 10: api.edge.v1.GetQuoteRequest
	(*GetQuoteReply)(nil),                 // 11: api.edge.v1.GetQuoteReply
	(*SwapRequest)(nil),                   // 12: api.edge.v1.SwapRequest
	(*SwapReply)(nil),                     // 13: api.edge.v1.SwapReply
	(*OrderRequest)(nil),                  // 14: api.edge.v1.OrderRequest
	(*OrderReply)(nil),                    // 15: api.edge.v1.OrderReply
	(*CreateSwapOrderRequest)(nil),        // 16: api.edge.v1.CreateSwapOrderRequest
	(*CreateSwapOrderReply)(nil),          // 17: api.edge.v1.CreateSwapOrderReply
	(*GetOrderDetailRequest)(nil),         // 18: api.edge.v1.GetOrderDetailRequest
	(*GetOrderDetailReply)(nil),           // 19: api.edge.v1.GetOrderDetailReply
}
var file_edge_v1_edge_proto_depIdxs = []int32{
	4,  // 0: api.edge.v1.GetSupportedChainsReply.chains:type_name -> api.edge.v1.Chain
	7,  // 1: api.edge.v1.GetTokenByChainReply.tokens:type_name -> api.edge.v1.Token
	0,  // 2: api.edge.v1.Edge.CheckBlacklistAddress:input_type -> api.edge.v1.CheckBlacklistAddressRequest
	2,  // 3: api.edge.v1.Edge.GetSupportedChains:input_type -> api.edge.v1.GetSupportedChainsRequest
	5,  // 4: api.edge.v1.Edge.GetTokenByChain:input_type -> api.edge.v1.GetTokenByChainRequest
	10, // 5: api.edge.v1.Edge.GetQuote:input_type -> api.edge.v1.GetQuoteRequest
	16, // 6: api.edge.v1.Edge.CreateSwapOrder:input_type -> api.edge.v1.CreateSwapOrderRequest
	12, // 7: api.edge.v1.Edge.Swap:input_type -> api.edge.v1.SwapRequest
	14, // 8: api.edge.v1.Edge.getTransDataById:input_type -> api.edge.v1.OrderRequest
	18, // 9: api.edge.v1.Edge.GetOrderDetail:input_type -> api.edge.v1.GetOrderDetailRequest
	8,  // 10: api.edge.v1.Edge.AddressMalicious:input_type -> api.edge.v1.AddressMaliciousRequest
	1,  // 11: api.edge.v1.Edge.CheckBlacklistAddress:output_type -> api.edge.v1.CheckBlacklistAddressResponse
	3,  // 12: api.edge.v1.Edge.GetSupportedChains:output_type -> api.edge.v1.GetSupportedChainsReply
	6,  // 13: api.edge.v1.Edge.GetTokenByChain:output_type -> api.edge.v1.GetTokenByChainReply
	11, // 14: api.edge.v1.Edge.GetQuote:output_type -> api.edge.v1.GetQuoteReply
	17, // 15: api.edge.v1.Edge.CreateSwapOrder:output_type -> api.edge.v1.CreateSwapOrderReply
	13, // 16: api.edge.v1.Edge.Swap:output_type -> api.edge.v1.SwapReply
	15, // 17: api.edge.v1.Edge.getTransDataById:output_type -> api.edge.v1.OrderReply
	19, // 18: api.edge.v1.Edge.GetOrderDetail:output_type -> api.edge.v1.GetOrderDetailReply
	9,  // 19: api.edge.v1.Edge.AddressMalicious:output_type -> api.edge.v1.AddressMaliciousReply
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_edge_v1_edge_proto_init() }
func file_edge_v1_edge_proto_init() {
	if File_edge_v1_edge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_edge_v1_edge_proto_rawDesc), len(file_edge_v1_edge_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_edge_v1_edge_proto_goTypes,
		DependencyIndexes: file_edge_v1_edge_proto_depIdxs,
		MessageInfos:      file_edge_v1_edge_proto_msgTypes,
	}.Build()
	File_edge_v1_edge_proto = out.File
	file_edge_v1_edge_proto_goTypes = nil
	file_edge_v1_edge_proto_depIdxs = nil
}
