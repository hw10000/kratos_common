// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: trade/v1/trade.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkType int32

const (
	NetworkType_NETWORK_TYPE_UNSPECIFIED NetworkType = 0 // 未指定
	NetworkType_NETWORK_TYPE_EVM         NetworkType = 1 // EVM
	NetworkType_NETWORK_TYPE_SOL         NetworkType = 2 // SOL
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_UNSPECIFIED",
		1: "NETWORK_TYPE_EVM",
		2: "NETWORK_TYPE_SOL",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_UNSPECIFIED": 0,
		"NETWORK_TYPE_EVM":         1,
		"NETWORK_TYPE_SOL":         2,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_v1_trade_proto_enumTypes[0].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_trade_v1_trade_proto_enumTypes[0]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{0}
}

type GetTokenInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenInfoRequest) Reset() {
	*x = GetTokenInfoRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenInfoRequest) ProtoMessage() {}

func (x *GetTokenInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTokenInfoRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{0}
}

func (x *GetTokenInfoRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTokenInfoRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type GetTokenInfoReply struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TokenAddress     string                 `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`               // 代币地址
	TokenName        string                 `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`                        // 代币名称
	TokenSymbol      string                 `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`                  // 代币符号
	TokenDecimals    uint32                 `protobuf:"varint,4,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`           // 代币小数位数
	TokenTotalSupply string                 `protobuf:"bytes,5,opt,name=token_total_supply,json=tokenTotalSupply,proto3" json:"token_total_supply,omitempty"` // 代币总供应量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetTokenInfoReply) Reset() {
	*x = GetTokenInfoReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenInfoReply) ProtoMessage() {}

func (x *GetTokenInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenInfoReply.ProtoReflect.Descriptor instead.
func (*GetTokenInfoReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{1}
}

func (x *GetTokenInfoReply) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *GetTokenInfoReply) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *GetTokenInfoReply) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *GetTokenInfoReply) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *GetTokenInfoReply) GetTokenTotalSupply() string {
	if x != nil {
		return x.TokenTotalSupply
	}
	return ""
}

type GetTokenPriceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenPriceRequest) Reset() {
	*x = GetTokenPriceRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenPriceRequest) ProtoMessage() {}

func (x *GetTokenPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenPriceRequest.ProtoReflect.Descriptor instead.
func (*GetTokenPriceRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{2}
}

func (x *GetTokenPriceRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTokenPriceRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type GetTokenPriceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         string                 `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"` // USDT价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenPriceReply) Reset() {
	*x = GetTokenPriceReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenPriceReply) ProtoMessage() {}

func (x *GetTokenPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenPriceReply.ProtoReflect.Descriptor instead.
func (*GetTokenPriceReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{3}
}

func (x *GetTokenPriceReply) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type GetTokenMarketCapRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenMarketCapRequest) Reset() {
	*x = GetTokenMarketCapRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenMarketCapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenMarketCapRequest) ProtoMessage() {}

func (x *GetTokenMarketCapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenMarketCapRequest.ProtoReflect.Descriptor instead.
func (*GetTokenMarketCapRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{4}
}

func (x *GetTokenMarketCapRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTokenMarketCapRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type GetTokenMarketCapReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketCap     float64                `protobuf:"fixed64,1,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"` // 市值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenMarketCapReply) Reset() {
	*x = GetTokenMarketCapReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenMarketCapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenMarketCapReply) ProtoMessage() {}

func (x *GetTokenMarketCapReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenMarketCapReply.ProtoReflect.Descriptor instead.
func (*GetTokenMarketCapReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{5}
}

func (x *GetTokenMarketCapReply) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

type GetTokenLiquidityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenLiquidityRequest) Reset() {
	*x = GetTokenLiquidityRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenLiquidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenLiquidityRequest) ProtoMessage() {}

func (x *GetTokenLiquidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenLiquidityRequest.ProtoReflect.Descriptor instead.
func (*GetTokenLiquidityRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{6}
}

func (x *GetTokenLiquidityRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTokenLiquidityRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type GetTokenLiquidityReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LiquidityPools []*LiquidityPool       `protobuf:"bytes,1,rep,name=liquidity_pools,json=liquidityPools,proto3" json:"liquidity_pools,omitempty"` // 流动性池
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTokenLiquidityReply) Reset() {
	*x = GetTokenLiquidityReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenLiquidityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenLiquidityReply) ProtoMessage() {}

func (x *GetTokenLiquidityReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenLiquidityReply.ProtoReflect.Descriptor instead.
func (*GetTokenLiquidityReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{7}
}

func (x *GetTokenLiquidityReply) GetLiquidityPools() []*LiquidityPool {
	if x != nil {
		return x.LiquidityPools
	}
	return nil
}

type LiquidityPool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PairLabel     string                 `protobuf:"bytes,1,opt,name=pair_label,json=pairLabel,proto3" json:"pair_label,omitempty"`       // 流动性
	PairAddress   string                 `protobuf:"bytes,2,opt,name=pair_address,json=pairAddress,proto3" json:"pair_address,omitempty"` // 流动性地址
	Liquidity     float64                `protobuf:"fixed64,3,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                      // 流动性
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiquidityPool) Reset() {
	*x = LiquidityPool{}
	mi := &file_trade_v1_trade_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiquidityPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPool) ProtoMessage() {}

func (x *LiquidityPool) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPool.ProtoReflect.Descriptor instead.
func (*LiquidityPool) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{8}
}

func (x *LiquidityPool) GetPairLabel() string {
	if x != nil {
		return x.PairLabel
	}
	return ""
}

func (x *LiquidityPool) GetPairAddress() string {
	if x != nil {
		return x.PairAddress
	}
	return ""
}

func (x *LiquidityPool) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

type GetTokenTradeInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenTradeInfoRequest) Reset() {
	*x = GetTokenTradeInfoRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenTradeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenTradeInfoRequest) ProtoMessage() {}

func (x *GetTokenTradeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenTradeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTokenTradeInfoRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{9}
}

func (x *GetTokenTradeInfoRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTokenTradeInfoRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type GetTokenTradeInfoReply struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TokenAddress     string                 `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`               // 代币地址
	TokenName        string                 `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`                        // 代币名称
	TokenSymbol      string                 `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`                  // 代币符号
	TokenDecimals    uint32                 `protobuf:"varint,4,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`           // 代币小数位数
	TokenTotalSupply string                 `protobuf:"bytes,5,opt,name=token_total_supply,json=tokenTotalSupply,proto3" json:"token_total_supply,omitempty"` // 代币总供应量
	Price            string                 `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`                                                 // USDT价格
	MarketCap        float64                `protobuf:"fixed64,7,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`                      // 市值
	Liquidity        float64                `protobuf:"fixed64,8,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                                       // 流动性
	ExplorerUrl      string                 `protobuf:"bytes,9,opt,name=explorer_url,json=explorerUrl,proto3" json:"explorer_url,omitempty"`                  // 浏览器URL
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetTokenTradeInfoReply) Reset() {
	*x = GetTokenTradeInfoReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenTradeInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenTradeInfoReply) ProtoMessage() {}

func (x *GetTokenTradeInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenTradeInfoReply.ProtoReflect.Descriptor instead.
func (*GetTokenTradeInfoReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{10}
}

func (x *GetTokenTradeInfoReply) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *GetTokenTradeInfoReply) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *GetTokenTradeInfoReply) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *GetTokenTradeInfoReply) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *GetTokenTradeInfoReply) GetTokenTotalSupply() string {
	if x != nil {
		return x.TokenTotalSupply
	}
	return ""
}

func (x *GetTokenTradeInfoReply) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *GetTokenTradeInfoReply) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *GetTokenTradeInfoReply) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *GetTokenTradeInfoReply) GetExplorerUrl() string {
	if x != nil {
		return x.ExplorerUrl
	}
	return ""
}

type TradeTokenRawTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`               // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`      // to_token_address
	FromAddress   string                 `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`         // 用户的地址
	Amount        float64                `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`                                    // 数量 买入是数量 卖出是百分比
	Direction     int32                  `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`                               // 方向 1: 买入 2: 卖出
	Slippage      float64                `protobuf:"fixed64,6,opt,name=slippage,proto3" json:"slippage,omitempty"`                                // 滑点 1-100
	TokenInSymbol string                 `protobuf:"bytes,7,opt,name=token_in_symbol,json=tokenInSymbol,proto3" json:"token_in_symbol,omitempty"` // 交易币种 买入是USDT 卖出是代币
	FeePercent    float64                `protobuf:"fixed64,8,opt,name=fee_percent,json=feePercent,proto3" json:"fee_percent,omitempty"`          // 手续费比例
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeTokenRawTxRequest) Reset() {
	*x = TradeTokenRawTxRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeTokenRawTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTokenRawTxRequest) ProtoMessage() {}

func (x *TradeTokenRawTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTokenRawTxRequest.ProtoReflect.Descriptor instead.
func (*TradeTokenRawTxRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{11}
}

func (x *TradeTokenRawTxRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *TradeTokenRawTxRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *TradeTokenRawTxRequest) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *TradeTokenRawTxRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TradeTokenRawTxRequest) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *TradeTokenRawTxRequest) GetSlippage() float64 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

func (x *TradeTokenRawTxRequest) GetTokenInSymbol() string {
	if x != nil {
		return x.TokenInSymbol
	}
	return ""
}

func (x *TradeTokenRawTxRequest) GetFeePercent() float64 {
	if x != nil {
		return x.FeePercent
	}
	return 0
}

type TradeTokenRawTxReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawTxs        []string               `protobuf:"bytes,1,rep,name=raw_txs,json=rawTxs,proto3" json:"raw_txs,omitempty"`                 // 交易哈希
	FeeAmount     string                 `protobuf:"bytes,2,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`        // 金额
	FeeDecimals   uint32                 `protobuf:"varint,3,opt,name=fee_decimals,json=feeDecimals,proto3" json:"fee_decimals,omitempty"` // 精度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeTokenRawTxReply) Reset() {
	*x = TradeTokenRawTxReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeTokenRawTxReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTokenRawTxReply) ProtoMessage() {}

func (x *TradeTokenRawTxReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTokenRawTxReply.ProtoReflect.Descriptor instead.
func (*TradeTokenRawTxReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{12}
}

func (x *TradeTokenRawTxReply) GetRawTxs() []string {
	if x != nil {
		return x.RawTxs
	}
	return nil
}

func (x *TradeTokenRawTxReply) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *TradeTokenRawTxReply) GetFeeDecimals() uint32 {
	if x != nil {
		return x.FeeDecimals
	}
	return 0
}

type GetNativeBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"` // 链名称
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                      // 地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNativeBalanceRequest) Reset() {
	*x = GetNativeBalanceRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNativeBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeBalanceRequest) ProtoMessage() {}

func (x *GetNativeBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetNativeBalanceRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{13}
}

func (x *GetNativeBalanceRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetNativeBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetNativeBalanceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       float64                `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"` // 余额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNativeBalanceReply) Reset() {
	*x = GetNativeBalanceReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNativeBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeBalanceReply) ProtoMessage() {}

func (x *GetNativeBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeBalanceReply.ProtoReflect.Descriptor instead.
func (*GetNativeBalanceReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{14}
}

func (x *GetNativeBalanceReply) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type GetContractTokenBalanceRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChainName       string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                   // 链名称
	Address         string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                        // 地址
	ContractAddress string                 `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"` // 合约地址
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetContractTokenBalanceRequest) Reset() {
	*x = GetContractTokenBalanceRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractTokenBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractTokenBalanceRequest) ProtoMessage() {}

func (x *GetContractTokenBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractTokenBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetContractTokenBalanceRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{15}
}

func (x *GetContractTokenBalanceRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetContractTokenBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetContractTokenBalanceRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type GetContractTokenBalanceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       float64                `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"` // 余额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContractTokenBalanceReply) Reset() {
	*x = GetContractTokenBalanceReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractTokenBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractTokenBalanceReply) ProtoMessage() {}

func (x *GetContractTokenBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractTokenBalanceReply.ProtoReflect.Descriptor instead.
func (*GetContractTokenBalanceReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{16}
}

func (x *GetContractTokenBalanceReply) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type GetAddressNetworkTypeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressNetworkTypeRequest) Reset() {
	*x = GetAddressNetworkTypeRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressNetworkTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressNetworkTypeRequest) ProtoMessage() {}

func (x *GetAddressNetworkTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressNetworkTypeRequest.ProtoReflect.Descriptor instead.
func (*GetAddressNetworkTypeRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{17}
}

func (x *GetAddressNetworkTypeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetAddressNetworkTypeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkType   NetworkType            `protobuf:"varint,1,opt,name=network_type,json=networkType,proto3,enum=api.trade.v1.NetworkType" json:"network_type,omitempty"` // 网络类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAddressNetworkTypeReply) Reset() {
	*x = GetAddressNetworkTypeReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAddressNetworkTypeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressNetworkTypeReply) ProtoMessage() {}

func (x *GetAddressNetworkTypeReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressNetworkTypeReply.ProtoReflect.Descriptor instead.
func (*GetAddressNetworkTypeReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{18}
}

func (x *GetAddressNetworkTypeReply) GetNetworkType() NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return NetworkType_NETWORK_TYPE_UNSPECIFIED
}

type GetTokenTradeQuoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenTradeQuoteRequest) Reset() {
	*x = GetTokenTradeQuoteRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenTradeQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenTradeQuoteRequest) ProtoMessage() {}

func (x *GetTokenTradeQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenTradeQuoteRequest.ProtoReflect.Descriptor instead.
func (*GetTokenTradeQuoteRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{19}
}

func (x *GetTokenTradeQuoteRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTokenTradeQuoteRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type GetTokenTradeQuoteReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quote         string                 `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`        // 计价币种
	Decimals      uint32                 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"` // 精度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenTradeQuoteReply) Reset() {
	*x = GetTokenTradeQuoteReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenTradeQuoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenTradeQuoteReply) ProtoMessage() {}

func (x *GetTokenTradeQuoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenTradeQuoteReply.ProtoReflect.Descriptor instead.
func (*GetTokenTradeQuoteReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{20}
}

func (x *GetTokenTradeQuoteReply) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *GetTokenTradeQuoteReply) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type IsContractRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"` // 链名称
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                      // 地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsContractRequest) Reset() {
	*x = IsContractRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsContractRequest) ProtoMessage() {}

func (x *IsContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsContractRequest.ProtoReflect.Descriptor instead.
func (*IsContractRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{21}
}

func (x *IsContractRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *IsContractRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type IsContractReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsContract    bool                   `protobuf:"varint,1,opt,name=is_contract,json=isContract,proto3" json:"is_contract,omitempty"` // 是否为合约
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsContractReply) Reset() {
	*x = IsContractReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsContractReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsContractReply) ProtoMessage() {}

func (x *IsContractReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsContractReply.ProtoReflect.Descriptor instead.
func (*IsContractReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{22}
}

func (x *IsContractReply) GetIsContract() bool {
	if x != nil {
		return x.IsContract
	}
	return false
}

type BuildTokenTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	UserAddress   string                 `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`    // 用户地址
	Amount        float64                `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                               // 数量
	TokenAddress  string                 `protobuf:"bytes,4,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	ToAddress     string                 `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`          // 目标地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildTokenTransferRequest) Reset() {
	*x = BuildTokenTransferRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildTokenTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildTokenTransferRequest) ProtoMessage() {}

func (x *BuildTokenTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildTokenTransferRequest.ProtoReflect.Descriptor instead.
func (*BuildTokenTransferRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{23}
}

func (x *BuildTokenTransferRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *BuildTokenTransferRequest) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *BuildTokenTransferRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BuildTokenTransferRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *BuildTokenTransferRequest) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

type BuildTokenTransferReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawsTx        string                 `protobuf:"bytes,1,opt,name=raws_tx,json=rawsTx,proto3" json:"raws_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildTokenTransferReply) Reset() {
	*x = BuildTokenTransferReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildTokenTransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildTokenTransferReply) ProtoMessage() {}

func (x *BuildTokenTransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildTokenTransferReply.ProtoReflect.Descriptor instead.
func (*BuildTokenTransferReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{24}
}

func (x *BuildTokenTransferReply) GetRawsTx() string {
	if x != nil {
		return x.RawsTx
	}
	return ""
}

type SecurityCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`          // 链名称
	TokenAddress  string                 `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // 代币地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityCheckRequest) Reset() {
	*x = SecurityCheckRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityCheckRequest) ProtoMessage() {}

func (x *SecurityCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityCheckRequest.ProtoReflect.Descriptor instead.
func (*SecurityCheckRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{25}
}

func (x *SecurityCheckRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *SecurityCheckRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type SecurityCheckReply struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	BuyTax                     float64                `protobuf:"fixed64,1,opt,name=buy_tax,json=buyTax,proto3" json:"buy_tax,omitempty"`                                                              // 买入税 EVM 0-100%
	SellTax                    float64                `protobuf:"fixed64,2,opt,name=sell_tax,json=sellTax,proto3" json:"sell_tax,omitempty"`                                                           // 卖出税 EVM 0-100%
	BurnLiquidityPercent       float64                `protobuf:"fixed64,3,opt,name=burn_liquidity_percent,json=burnLiquidityPercent,proto3" json:"burn_liquidity_percent,omitempty"`                  // 销毁流动性百分比 0-100%
	RenounceBlacklistAuthority bool                   `protobuf:"varint,4,opt,name=renounce_blacklist_authority,json=renounceBlacklistAuthority,proto3" json:"renounce_blacklist_authority,omitempty"` // 放弃黑名单权限 SOL
	RenounceMintAuthority      bool                   `protobuf:"varint,5,opt,name=renounce_mint_authority,json=renounceMintAuthority,proto3" json:"renounce_mint_authority,omitempty"`                // 放弃铸币权限 SOL
	BurnLiquidity              bool                   `protobuf:"varint,6,opt,name=burn_liquidity,json=burnLiquidity,proto3" json:"burn_liquidity,omitempty"`                                          // 销毁流动性 SOL
	OpenSource                 bool                   `protobuf:"varint,7,opt,name=open_source,json=openSource,proto3" json:"open_source,omitempty"`                                                   // 开源 EVM
	RenounceOwnership          bool                   `protobuf:"varint,8,opt,name=renounce_ownership,json=renounceOwnership,proto3" json:"renounce_ownership,omitempty"`                              // 放弃所有权 EVM
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SecurityCheckReply) Reset() {
	*x = SecurityCheckReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityCheckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityCheckReply) ProtoMessage() {}

func (x *SecurityCheckReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityCheckReply.ProtoReflect.Descriptor instead.
func (*SecurityCheckReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{26}
}

func (x *SecurityCheckReply) GetBuyTax() float64 {
	if x != nil {
		return x.BuyTax
	}
	return 0
}

func (x *SecurityCheckReply) GetSellTax() float64 {
	if x != nil {
		return x.SellTax
	}
	return 0
}

func (x *SecurityCheckReply) GetBurnLiquidityPercent() float64 {
	if x != nil {
		return x.BurnLiquidityPercent
	}
	return 0
}

func (x *SecurityCheckReply) GetRenounceBlacklistAuthority() bool {
	if x != nil {
		return x.RenounceBlacklistAuthority
	}
	return false
}

func (x *SecurityCheckReply) GetRenounceMintAuthority() bool {
	if x != nil {
		return x.RenounceMintAuthority
	}
	return false
}

func (x *SecurityCheckReply) GetBurnLiquidity() bool {
	if x != nil {
		return x.BurnLiquidity
	}
	return false
}

func (x *SecurityCheckReply) GetOpenSource() bool {
	if x != nil {
		return x.OpenSource
	}
	return false
}

func (x *SecurityCheckReply) GetRenounceOwnership() bool {
	if x != nil {
		return x.RenounceOwnership
	}
	return false
}

type GetNativeTokenPriceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"` // 链名称：SOL, ETH, BSC, BASE等
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNativeTokenPriceRequest) Reset() {
	*x = GetNativeTokenPriceRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNativeTokenPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeTokenPriceRequest) ProtoMessage() {}

func (x *GetNativeTokenPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeTokenPriceRequest.ProtoReflect.Descriptor instead.
func (*GetNativeTokenPriceRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{27}
}

func (x *GetNativeTokenPriceRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type GetNativeTokenPriceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         string                 `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"` // 美元价格，字符串格式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNativeTokenPriceReply) Reset() {
	*x = GetNativeTokenPriceReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNativeTokenPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeTokenPriceReply) ProtoMessage() {}

func (x *GetNativeTokenPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeTokenPriceReply.ProtoReflect.Descriptor instead.
func (*GetNativeTokenPriceReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{28}
}

func (x *GetNativeTokenPriceReply) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type SendRawTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"` // 链名称
	RawTxs        []string               `protobuf:"bytes,2,rep,name=raw_txs,json=rawTxs,proto3" json:"raw_txs,omitempty"`          // 一签名交易数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRawTxRequest) Reset() {
	*x = SendRawTxRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRawTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRawTxRequest) ProtoMessage() {}

func (x *SendRawTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRawTxRequest.ProtoReflect.Descriptor instead.
func (*SendRawTxRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{29}
}

func (x *SendRawTxRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *SendRawTxRequest) GetRawTxs() []string {
	if x != nil {
		return x.RawTxs
	}
	return nil
}

type SendRawTxReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHashes      []string               `protobuf:"bytes,1,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"` // 交易哈希
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRawTxReply) Reset() {
	*x = SendRawTxReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRawTxReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRawTxReply) ProtoMessage() {}

func (x *SendRawTxReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRawTxReply.ProtoReflect.Descriptor instead.
func (*SendRawTxReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{30}
}

func (x *SendRawTxReply) GetTxHashes() []string {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

type SendRawTxByPrivateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"` // 链名称
	RawTxs        []string               `protobuf:"bytes,2,rep,name=raw_txs,json=rawTxs,proto3" json:"raw_txs,omitempty"`          // 一签名交易数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRawTxByPrivateRequest) Reset() {
	*x = SendRawTxByPrivateRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRawTxByPrivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRawTxByPrivateRequest) ProtoMessage() {}

func (x *SendRawTxByPrivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRawTxByPrivateRequest.ProtoReflect.Descriptor instead.
func (*SendRawTxByPrivateRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{31}
}

func (x *SendRawTxByPrivateRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *SendRawTxByPrivateRequest) GetRawTxs() []string {
	if x != nil {
		return x.RawTxs
	}
	return nil
}

type SendRawTxByPrivateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHashes      []string               `protobuf:"bytes,1,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"` // 交易哈希
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRawTxByPrivateReply) Reset() {
	*x = SendRawTxByPrivateReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRawTxByPrivateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRawTxByPrivateReply) ProtoMessage() {}

func (x *SendRawTxByPrivateReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRawTxByPrivateReply.ProtoReflect.Descriptor instead.
func (*SendRawTxByPrivateReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{32}
}

func (x *SendRawTxByPrivateReply) GetTxHashes() []string {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

// 交易状态
type GetTransactionStatusRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChainName       string                 `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                   // 链名称
	TransactionHash string                 `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"` // 交易哈希
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTransactionStatusRequest) Reset() {
	*x = GetTransactionStatusRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequest) ProtoMessage() {}

func (x *GetTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{33}
}

func (x *GetTransactionStatusRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTransactionStatusRequest) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type GetTransactionStatusReply struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TransactionHash string                 `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"` // 交易哈希
	FromAddress     string                 `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`             // 发起地址
	ToAddress       []string               `protobuf:"bytes,3,rep,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`                   // 接收地址
	Status          int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                         // 状态
	BlockNumber     string                 `protobuf:"bytes,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`             // 区块号
	BlockTime       string                 `protobuf:"bytes,6,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`                   // 区块时间
	RawTransaction  string                 `protobuf:"bytes,7,opt,name=raw_transaction,json=rawTransaction,proto3" json:"raw_transaction,omitempty"`    // 原始交易
	Error           string                 `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`                                            // 错误信息
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTransactionStatusReply) Reset() {
	*x = GetTransactionStatusReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusReply) ProtoMessage() {}

func (x *GetTransactionStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusReply.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{34}
}

func (x *GetTransactionStatusReply) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *GetTransactionStatusReply) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *GetTransactionStatusReply) GetToAddress() []string {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *GetTransactionStatusReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetTransactionStatusReply) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *GetTransactionStatusReply) GetBlockTime() string {
	if x != nil {
		return x.BlockTime
	}
	return ""
}

func (x *GetTransactionStatusReply) GetRawTransaction() string {
	if x != nil {
		return x.RawTransaction
	}
	return ""
}

func (x *GetTransactionStatusReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`     // 链名称
	Network       string                 `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"` // 网络名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{35}
}

func (x *CreateAddressRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateAddressRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type CreateAddressReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                      // 地址
	StorageId     string                 `protobuf:"bytes,2,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"` // 存储ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAddressReply) Reset() {
	*x = CreateAddressReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressReply) ProtoMessage() {}

func (x *CreateAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressReply.ProtoReflect.Descriptor instead.
func (*CreateAddressReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{36}
}

func (x *CreateAddressReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateAddressReply) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

type StoreSecretReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageId     string                 `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreSecretReply) Reset() {
	*x = StoreSecretReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSecretReply) ProtoMessage() {}

func (x *StoreSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSecretReply.ProtoReflect.Descriptor instead.
func (*StoreSecretReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{37}
}

func (x *StoreSecretReply) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *StoreSecretReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DecodeSecretRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageId     string                 `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeSecretRequest) Reset() {
	*x = DecodeSecretRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeSecretRequest) ProtoMessage() {}

func (x *DecodeSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeSecretRequest.ProtoReflect.Descriptor instead.
func (*DecodeSecretRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{38}
}

func (x *DecodeSecretRequest) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

type DecodeSecretReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Secret:
	//
	//	*DecodeSecretReply_PrivateKey
	//	*DecodeSecretReply_Mnemonic
	Secret        isDecodeSecretReply_Secret `protobuf_oneof:"secret"`
	Address       string                     `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeSecretReply) Reset() {
	*x = DecodeSecretReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeSecretReply) ProtoMessage() {}

func (x *DecodeSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeSecretReply.ProtoReflect.Descriptor instead.
func (*DecodeSecretReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{39}
}

func (x *DecodeSecretReply) GetSecret() isDecodeSecretReply_Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *DecodeSecretReply) GetPrivateKey() string {
	if x != nil {
		if x, ok := x.Secret.(*DecodeSecretReply_PrivateKey); ok {
			return x.PrivateKey
		}
	}
	return ""
}

func (x *DecodeSecretReply) GetMnemonic() *MnemonicSecret {
	if x != nil {
		if x, ok := x.Secret.(*DecodeSecretReply_Mnemonic); ok {
			return x.Mnemonic
		}
	}
	return nil
}

func (x *DecodeSecretReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type isDecodeSecretReply_Secret interface {
	isDecodeSecretReply_Secret()
}

type DecodeSecretReply_PrivateKey struct {
	PrivateKey string `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3,oneof"`
}

type DecodeSecretReply_Mnemonic struct {
	Mnemonic *MnemonicSecret `protobuf:"bytes,2,opt,name=mnemonic,proto3,oneof"`
}

func (*DecodeSecretReply_PrivateKey) isDecodeSecretReply_Secret() {}

func (*DecodeSecretReply_Mnemonic) isDecodeSecretReply_Secret() {}

type StoreSecretBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Secrets       []*StoreSecretRequest  `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreSecretBatchRequest) Reset() {
	*x = StoreSecretBatchRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreSecretBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSecretBatchRequest) ProtoMessage() {}

func (x *StoreSecretBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSecretBatchRequest.ProtoReflect.Descriptor instead.
func (*StoreSecretBatchRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{40}
}

func (x *StoreSecretBatchRequest) GetSecrets() []*StoreSecretRequest {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type StoreSecretBatchReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Storages      []*StoreSecretReply    `protobuf:"bytes,1,rep,name=storages,proto3" json:"storages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreSecretBatchReply) Reset() {
	*x = StoreSecretBatchReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreSecretBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSecretBatchReply) ProtoMessage() {}

func (x *StoreSecretBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSecretBatchReply.ProtoReflect.Descriptor instead.
func (*StoreSecretBatchReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{41}
}

func (x *StoreSecretBatchReply) GetStorages() []*StoreSecretReply {
	if x != nil {
		return x.Storages
	}
	return nil
}

type DecodeSecretBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageIds    []string               `protobuf:"bytes,1,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeSecretBatchRequest) Reset() {
	*x = DecodeSecretBatchRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeSecretBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeSecretBatchRequest) ProtoMessage() {}

func (x *DecodeSecretBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeSecretBatchRequest.ProtoReflect.Descriptor instead.
func (*DecodeSecretBatchRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{42}
}

func (x *DecodeSecretBatchRequest) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

type DecodeSecretBatchReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Storages      []*DecodeSecretReply   `protobuf:"bytes,1,rep,name=storages,proto3" json:"storages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeSecretBatchReply) Reset() {
	*x = DecodeSecretBatchReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeSecretBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeSecretBatchReply) ProtoMessage() {}

func (x *DecodeSecretBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeSecretBatchReply.ProtoReflect.Descriptor instead.
func (*DecodeSecretBatchReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{43}
}

func (x *DecodeSecretBatchReply) GetStorages() []*DecodeSecretReply {
	if x != nil {
		return x.Storages
	}
	return nil
}

type SignTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageId     string                 `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	RawTx         string                 `protobuf:"bytes,2,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignTxRequest) Reset() {
	*x = SignTxRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxRequest) ProtoMessage() {}

func (x *SignTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxRequest.ProtoReflect.Descriptor instead.
func (*SignTxRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{44}
}

func (x *SignTxRequest) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *SignTxRequest) GetRawTx() string {
	if x != nil {
		return x.RawTx
	}
	return ""
}

type SignTxReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SignedTx      string                 `protobuf:"bytes,1,opt,name=signed_tx,json=signedTx,proto3" json:"signed_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignTxReply) Reset() {
	*x = SignTxReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTxReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxReply) ProtoMessage() {}

func (x *SignTxReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxReply.ProtoReflect.Descriptor instead.
func (*SignTxReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{45}
}

func (x *SignTxReply) GetSignedTx() string {
	if x != nil {
		return x.SignedTx
	}
	return ""
}

type SignTxBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageId     string                 `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	RawTxs        []string               `protobuf:"bytes,2,rep,name=raw_txs,json=rawTxs,proto3" json:"raw_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignTxBatchRequest) Reset() {
	*x = SignTxBatchRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTxBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxBatchRequest) ProtoMessage() {}

func (x *SignTxBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxBatchRequest.ProtoReflect.Descriptor instead.
func (*SignTxBatchRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{46}
}

func (x *SignTxBatchRequest) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *SignTxBatchRequest) GetRawTxs() []string {
	if x != nil {
		return x.RawTxs
	}
	return nil
}

type SignTxBatchReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SignedTxs     []string               `protobuf:"bytes,1,rep,name=signed_txs,json=signedTxs,proto3" json:"signed_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignTxBatchReply) Reset() {
	*x = SignTxBatchReply{}
	mi := &file_trade_v1_trade_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTxBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxBatchReply) ProtoMessage() {}

func (x *SignTxBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxBatchReply.ProtoReflect.Descriptor instead.
func (*SignTxBatchReply) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{47}
}

func (x *SignTxBatchReply) GetSignedTxs() []string {
	if x != nil {
		return x.SignedTxs
	}
	return nil
}

type StoreSecretRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Chain string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Types that are valid to be assigned to Secret:
	//
	//	*StoreSecretRequest_PrivateKey
	//	*StoreSecretRequest_Mnemonic
	Secret        isStoreSecretRequest_Secret `protobuf_oneof:"secret"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreSecretRequest) Reset() {
	*x = StoreSecretRequest{}
	mi := &file_trade_v1_trade_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSecretRequest) ProtoMessage() {}

func (x *StoreSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSecretRequest.ProtoReflect.Descriptor instead.
func (*StoreSecretRequest) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{48}
}

func (x *StoreSecretRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *StoreSecretRequest) GetSecret() isStoreSecretRequest_Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *StoreSecretRequest) GetPrivateKey() string {
	if x != nil {
		if x, ok := x.Secret.(*StoreSecretRequest_PrivateKey); ok {
			return x.PrivateKey
		}
	}
	return ""
}

func (x *StoreSecretRequest) GetMnemonic() *MnemonicSecret {
	if x != nil {
		if x, ok := x.Secret.(*StoreSecretRequest_Mnemonic); ok {
			return x.Mnemonic
		}
	}
	return nil
}

type isStoreSecretRequest_Secret interface {
	isStoreSecretRequest_Secret()
}

type StoreSecretRequest_PrivateKey struct {
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3,oneof"`
}

type StoreSecretRequest_Mnemonic struct {
	Mnemonic *MnemonicSecret `protobuf:"bytes,3,opt,name=mnemonic,proto3,oneof"`
}

func (*StoreSecretRequest_PrivateKey) isStoreSecretRequest_Secret() {}

func (*StoreSecretRequest_Mnemonic) isStoreSecretRequest_Secret() {}

type MnemonicSecret struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mnemonic      string                 `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	PathIndex     uint32                 `protobuf:"varint,2,opt,name=path_index,json=pathIndex,proto3" json:"path_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MnemonicSecret) Reset() {
	*x = MnemonicSecret{}
	mi := &file_trade_v1_trade_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MnemonicSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MnemonicSecret) ProtoMessage() {}

func (x *MnemonicSecret) ProtoReflect() protoreflect.Message {
	mi := &file_trade_v1_trade_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MnemonicSecret.ProtoReflect.Descriptor instead.
func (*MnemonicSecret) Descriptor() ([]byte, []int) {
	return file_trade_v1_trade_proto_rawDescGZIP(), []int{49}
}

func (x *MnemonicSecret) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *MnemonicSecret) GetPathIndex() uint32 {
	if x != nil {
		return x.PathIndex
	}
	return 0
}

var File_trade_v1_trade_proto protoreflect.FileDescriptor

var file_trade_v1_trade_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x22, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x22, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0f,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x0d, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x69, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x22, 0x9a, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x77, 0x54, 0x78,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x54, 0x78, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x5a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3c, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x11,
	0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x0f, 0x49, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xb9,
	0x01, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x17, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x73, 0x54, 0x78, 0x22, 0x5a,
	0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x12, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x54, 0x61, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65,
	0x6c, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x62, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x72,
	0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62,
	0x75, 0x72, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x3b, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x61, 0x77, 0x54, 0x78, 0x73, 0x22, 0x2d, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x54, 0x78, 0x73, 0x22, 0x36, 0x0a, 0x17, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa1, 0x02, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x34, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x3b, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x16,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x77, 0x54, 0x78, 0x22, 0x2a, 0x0a, 0x0b, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x61, 0x77, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61,
	0x77, 0x54, 0x78, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4b, 0x0a,
	0x0e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0x57, 0x0a, 0x0b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x4d, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f,
	0x4c, 0x10, 0x02, 0x32, 0xdf, 0x10, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x52, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x61, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x61, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x61,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x5b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x61, 0x77, 0x54, 0x78, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5e,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x73,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x64, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x67, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61,
	0x77, 0x54, 0x78, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x64, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78,
	0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0c, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x5e, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x61, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x12, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x38, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x26, 0x63, 0x6f, 0x72, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_trade_v1_trade_proto_rawDescOnce sync.Once
	file_trade_v1_trade_proto_rawDescData []byte
)

func file_trade_v1_trade_proto_rawDescGZIP() []byte {
	file_trade_v1_trade_proto_rawDescOnce.Do(func() {
		file_trade_v1_trade_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trade_v1_trade_proto_rawDesc), len(file_trade_v1_trade_proto_rawDesc)))
	})
	return file_trade_v1_trade_proto_rawDescData
}

var file_trade_v1_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_trade_v1_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_trade_v1_trade_proto_goTypes = []any{
	(NetworkType)(0),                       // 0: api.trade.v1.NetworkType
	(*GetTokenInfoRequest)(nil),            // 1: api.trade.v1.GetTokenInfoRequest
	(*GetTokenInfoReply)(nil),              // 2: api.trade.v1.GetTokenInfoReply
	(*GetTokenPriceRequest)(nil),           // 3: api.trade.v1.GetTokenPriceRequest
	(*GetTokenPriceReply)(nil),             // 4: api.trade.v1.GetTokenPriceReply
	(*GetTokenMarketCapRequest)(nil),       // 5: api.trade.v1.GetTokenMarketCapRequest
	(*GetTokenMarketCapReply)(nil),         // 6: api.trade.v1.GetTokenMarketCapReply
	(*GetTokenLiquidityRequest)(nil),       // 7: api.trade.v1.GetTokenLiquidityRequest
	(*GetTokenLiquidityReply)(nil),         // 8: api.trade.v1.GetTokenLiquidityReply
	(*LiquidityPool)(nil),                  // 9: api.trade.v1.LiquidityPool
	(*GetTokenTradeInfoRequest)(nil),       // 10: api.trade.v1.GetTokenTradeInfoRequest
	(*GetTokenTradeInfoReply)(nil),         // 11: api.trade.v1.GetTokenTradeInfoReply
	(*TradeTokenRawTxRequest)(nil),         // 12: api.trade.v1.TradeTokenRawTxRequest
	(*TradeTokenRawTxReply)(nil),           // 13: api.trade.v1.TradeTokenRawTxReply
	(*GetNativeBalanceRequest)(nil),        // 14: api.trade.v1.GetNativeBalanceRequest
	(*GetNativeBalanceReply)(nil),          // 15: api.trade.v1.GetNativeBalanceReply
	(*GetContractTokenBalanceRequest)(nil), // 16: api.trade.v1.GetContractTokenBalanceRequest
	(*GetContractTokenBalanceReply)(nil),   // 17: api.trade.v1.GetContractTokenBalanceReply
	(*GetAddressNetworkTypeRequest)(nil),   // 18: api.trade.v1.GetAddressNetworkTypeRequest
	(*GetAddressNetworkTypeReply)(nil),     // 19: api.trade.v1.GetAddressNetworkTypeReply
	(*GetTokenTradeQuoteRequest)(nil),      // 20: api.trade.v1.GetTokenTradeQuoteRequest
	(*GetTokenTradeQuoteReply)(nil),        // 21: api.trade.v1.GetTokenTradeQuoteReply
	(*IsContractRequest)(nil),              // 22: api.trade.v1.IsContractRequest
	(*IsContractReply)(nil),                // 23: api.trade.v1.IsContractReply
	(*BuildTokenTransferRequest)(nil),      // 24: api.trade.v1.BuildTokenTransferRequest
	(*BuildTokenTransferReply)(nil),        // 25: api.trade.v1.BuildTokenTransferReply
	(*SecurityCheckRequest)(nil),           // 26: api.trade.v1.SecurityCheckRequest
	(*SecurityCheckReply)(nil),             // 27: api.trade.v1.SecurityCheckReply
	(*GetNativeTokenPriceRequest)(nil),     // 28: api.trade.v1.GetNativeTokenPriceRequest
	(*GetNativeTokenPriceReply)(nil),       // 29: api.trade.v1.GetNativeTokenPriceReply
	(*SendRawTxRequest)(nil),               // 30: api.trade.v1.SendRawTxRequest
	(*SendRawTxReply)(nil),                 // 31: api.trade.v1.SendRawTxReply
	(*SendRawTxByPrivateRequest)(nil),      // 32: api.trade.v1.SendRawTxByPrivateRequest
	(*SendRawTxByPrivateReply)(nil),        // 33: api.trade.v1.SendRawTxByPrivateReply
	(*GetTransactionStatusRequest)(nil),    // 34: api.trade.v1.GetTransactionStatusRequest
	(*GetTransactionStatusReply)(nil),      // 35: api.trade.v1.GetTransactionStatusReply
	(*CreateAddressRequest)(nil),           // 36: api.trade.v1.CreateAddressRequest
	(*CreateAddressReply)(nil),             // 37: api.trade.v1.CreateAddressReply
	(*StoreSecretReply)(nil),               // 38: api.trade.v1.StoreSecretReply
	(*DecodeSecretRequest)(nil),            // 39: api.trade.v1.DecodeSecretRequest
	(*DecodeSecretReply)(nil),              // 40: api.trade.v1.DecodeSecretReply
	(*StoreSecretBatchRequest)(nil),        // 41: api.trade.v1.StoreSecretBatchRequest
	(*StoreSecretBatchReply)(nil),          // 42: api.trade.v1.StoreSecretBatchReply
	(*DecodeSecretBatchRequest)(nil),       // 43: api.trade.v1.DecodeSecretBatchRequest
	(*DecodeSecretBatchReply)(nil),         // 44: api.trade.v1.DecodeSecretBatchReply
	(*SignTxRequest)(nil),                  // 45: api.trade.v1.SignTxRequest
	(*SignTxReply)(nil),                    // 46: api.trade.v1.SignTxReply
	(*SignTxBatchRequest)(nil),             // 47: api.trade.v1.SignTxBatchRequest
	(*SignTxBatchReply)(nil),               // 48: api.trade.v1.SignTxBatchReply
	(*StoreSecretRequest)(nil),             // 49: api.trade.v1.StoreSecretRequest
	(*MnemonicSecret)(nil),                 // 50: api.trade.v1.MnemonicSecret
}
var file_trade_v1_trade_proto_depIdxs = []int32{
	9,  // 0: api.trade.v1.GetTokenLiquidityReply.liquidity_pools:type_name -> api.trade.v1.LiquidityPool
	0,  // 1: api.trade.v1.GetAddressNetworkTypeReply.network_type:type_name -> api.trade.v1.NetworkType
	50, // 2: api.trade.v1.DecodeSecretReply.mnemonic:type_name -> api.trade.v1.MnemonicSecret
	49, // 3: api.trade.v1.StoreSecretBatchRequest.secrets:type_name -> api.trade.v1.StoreSecretRequest
	38, // 4: api.trade.v1.StoreSecretBatchReply.storages:type_name -> api.trade.v1.StoreSecretReply
	40, // 5: api.trade.v1.DecodeSecretBatchReply.storages:type_name -> api.trade.v1.DecodeSecretReply
	50, // 6: api.trade.v1.StoreSecretRequest.mnemonic:type_name -> api.trade.v1.MnemonicSecret
	1,  // 7: api.trade.v1.Trade.GetTokenInfo:input_type -> api.trade.v1.GetTokenInfoRequest
	3,  // 8: api.trade.v1.Trade.GetTokenPrice:input_type -> api.trade.v1.GetTokenPriceRequest
	5,  // 9: api.trade.v1.Trade.GetTokenMarketCap:input_type -> api.trade.v1.GetTokenMarketCapRequest
	7,  // 10: api.trade.v1.Trade.GetTokenLiquidity:input_type -> api.trade.v1.GetTokenLiquidityRequest
	10, // 11: api.trade.v1.Trade.GetTokenTradeInfo:input_type -> api.trade.v1.GetTokenTradeInfoRequest
	12, // 12: api.trade.v1.Trade.TradeTokenRawTx:input_type -> api.trade.v1.TradeTokenRawTxRequest
	14, // 13: api.trade.v1.Trade.GetNativeBalance:input_type -> api.trade.v1.GetNativeBalanceRequest
	16, // 14: api.trade.v1.Trade.GetContractTokenBalance:input_type -> api.trade.v1.GetContractTokenBalanceRequest
	18, // 15: api.trade.v1.Trade.GetAddressNetworkType:input_type -> api.trade.v1.GetAddressNetworkTypeRequest
	22, // 16: api.trade.v1.Trade.IsContract:input_type -> api.trade.v1.IsContractRequest
	24, // 17: api.trade.v1.Trade.BuildTokenTransfer:input_type -> api.trade.v1.BuildTokenTransferRequest
	26, // 18: api.trade.v1.Trade.SecurityCheck:input_type -> api.trade.v1.SecurityCheckRequest
	28, // 19: api.trade.v1.Trade.GetNativeTokenPrice:input_type -> api.trade.v1.GetNativeTokenPriceRequest
	30, // 20: api.trade.v1.Trade.SendRawTx:input_type -> api.trade.v1.SendRawTxRequest
	32, // 21: api.trade.v1.Trade.SendRawTxByPrivate:input_type -> api.trade.v1.SendRawTxByPrivateRequest
	34, // 22: api.trade.v1.Trade.GetTransactionStatus:input_type -> api.trade.v1.GetTransactionStatusRequest
	36, // 23: api.trade.v1.Trade.CreateAddress:input_type -> api.trade.v1.CreateAddressRequest
	49, // 24: api.trade.v1.Trade.StoreSecret:input_type -> api.trade.v1.StoreSecretRequest
	39, // 25: api.trade.v1.Trade.DecodeSecret:input_type -> api.trade.v1.DecodeSecretRequest
	41, // 26: api.trade.v1.Trade.StoreSecretBatch:input_type -> api.trade.v1.StoreSecretBatchRequest
	43, // 27: api.trade.v1.Trade.DecodeSecretBatch:input_type -> api.trade.v1.DecodeSecretBatchRequest
	45, // 28: api.trade.v1.Trade.SignTx:input_type -> api.trade.v1.SignTxRequest
	47, // 29: api.trade.v1.Trade.SignTxBatch:input_type -> api.trade.v1.SignTxBatchRequest
	2,  // 30: api.trade.v1.Trade.GetTokenInfo:output_type -> api.trade.v1.GetTokenInfoReply
	4,  // 31: api.trade.v1.Trade.GetTokenPrice:output_type -> api.trade.v1.GetTokenPriceReply
	6,  // 32: api.trade.v1.Trade.GetTokenMarketCap:output_type -> api.trade.v1.GetTokenMarketCapReply
	8,  // 33: api.trade.v1.Trade.GetTokenLiquidity:output_type -> api.trade.v1.GetTokenLiquidityReply
	11, // 34: api.trade.v1.Trade.GetTokenTradeInfo:output_type -> api.trade.v1.GetTokenTradeInfoReply
	13, // 35: api.trade.v1.Trade.TradeTokenRawTx:output_type -> api.trade.v1.TradeTokenRawTxReply
	15, // 36: api.trade.v1.Trade.GetNativeBalance:output_type -> api.trade.v1.GetNativeBalanceReply
	17, // 37: api.trade.v1.Trade.GetContractTokenBalance:output_type -> api.trade.v1.GetContractTokenBalanceReply
	19, // 38: api.trade.v1.Trade.GetAddressNetworkType:output_type -> api.trade.v1.GetAddressNetworkTypeReply
	23, // 39: api.trade.v1.Trade.IsContract:output_type -> api.trade.v1.IsContractReply
	25, // 40: api.trade.v1.Trade.BuildTokenTransfer:output_type -> api.trade.v1.BuildTokenTransferReply
	27, // 41: api.trade.v1.Trade.SecurityCheck:output_type -> api.trade.v1.SecurityCheckReply
	29, // 42: api.trade.v1.Trade.GetNativeTokenPrice:output_type -> api.trade.v1.GetNativeTokenPriceReply
	31, // 43: api.trade.v1.Trade.SendRawTx:output_type -> api.trade.v1.SendRawTxReply
	33, // 44: api.trade.v1.Trade.SendRawTxByPrivate:output_type -> api.trade.v1.SendRawTxByPrivateReply
	35, // 45: api.trade.v1.Trade.GetTransactionStatus:output_type -> api.trade.v1.GetTransactionStatusReply
	37, // 46: api.trade.v1.Trade.CreateAddress:output_type -> api.trade.v1.CreateAddressReply
	38, // 47: api.trade.v1.Trade.StoreSecret:output_type -> api.trade.v1.StoreSecretReply
	40, // 48: api.trade.v1.Trade.DecodeSecret:output_type -> api.trade.v1.DecodeSecretReply
	42, // 49: api.trade.v1.Trade.StoreSecretBatch:output_type -> api.trade.v1.StoreSecretBatchReply
	44, // 50: api.trade.v1.Trade.DecodeSecretBatch:output_type -> api.trade.v1.DecodeSecretBatchReply
	46, // 51: api.trade.v1.Trade.SignTx:output_type -> api.trade.v1.SignTxReply
	48, // 52: api.trade.v1.Trade.SignTxBatch:output_type -> api.trade.v1.SignTxBatchReply
	30, // [30:53] is the sub-list for method output_type
	7,  // [7:30] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_trade_v1_trade_proto_init() }
func file_trade_v1_trade_proto_init() {
	if File_trade_v1_trade_proto != nil {
		return
	}
	file_trade_v1_trade_proto_msgTypes[39].OneofWrappers = []any{
		(*DecodeSecretReply_PrivateKey)(nil),
		(*DecodeSecretReply_Mnemonic)(nil),
	}
	file_trade_v1_trade_proto_msgTypes[48].OneofWrappers = []any{
		(*StoreSecretRequest_PrivateKey)(nil),
		(*StoreSecretRequest_Mnemonic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trade_v1_trade_proto_rawDesc), len(file_trade_v1_trade_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trade_v1_trade_proto_goTypes,
		DependencyIndexes: file_trade_v1_trade_proto_depIdxs,
		EnumInfos:         file_trade_v1_trade_proto_enumTypes,
		MessageInfos:      file_trade_v1_trade_proto_msgTypes,
	}.Build()
	File_trade_v1_trade_proto = out.File
	file_trade_v1_trade_proto_goTypes = nil
	file_trade_v1_trade_proto_depIdxs = nil
}
